lwd = 3,
col = "grey")
#-------------------------------------------------------------------------------
# Same for symmetric components from head and mandi
A_sym <- array(NA,
dim = c(dim(bilatsym_head$symm.shape)[1] +
dim(bilatsym_mand$symm.shape)[1],
dim(bilatsym_head$symm.shape)[2:3]))
for (i in 1:dim(A_sym)[3]) {
A_sym[1:17,,i] <- bilatsym_head$symm.shape[,,i]
A_sym[18:26,,i] <- bilatsym_mand$symm.shape[,,i]
}
congru_sym <- abs(dotcorr(A_sym))
image(x = 1:dim(congru_sym)[1],
y = 1:dim(congru_sym)[1],
z = congru_sym,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = 17.5,
h = 17.5,
lwd = 3,
col = "grey")
#-------------------------------------------------------------------------------
# Test for 2BPLS relation between shape components and bf
bf_sym_head_pls <- two.b.pls(A1 = bilatsym_head$symm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
bf_asym_head_pls <- two.b.pls(A1 = bilatsym_head$asymm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
bf_sym_mand_pls <- two.b.pls(A1 = bilatsym_mand$symm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
bf_asym_mand_pls <- two.b.pls(A1 = bilatsym_mand$asymm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
#-------------------------------------------------------------------------------
# Test for modularity within the head only
# Then test for integration between each mandible and with head modules if signi
modu_head <- DF[which(DF[,6] == 1 | DF[,6] ==  4),
c(6, 10)]
mod_test_head <- modularity.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999,
CI = T)
integ_test_head <- integration.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999)
plot(A_overall[,2:3,1], asp= 1)
part_overall <- as.factor(c(rep("head", 17),
rep("LM", 9),
rep("RM", 9)))
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
levels(part_overall2)[1:2] <- c("head", "sensory")
integ_test_3mod <- integration.test(A = A_overall,
partition.gp = part_overall,
iter = 999)
integ_test_4mod <- integration.test(A = A_overall,
partition.gp = part_overall2,
iter = 999)
#-------------------------------------------------------------------------------
# New matrix plot with reordered LMs, and integration test results
modo_head <- modu_head[order(modu_head[,1]),]
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[order(modu_head[,1])]
congro_overall <- congru_overall
congro_overall[1:17, 1:17] <- congro_overall[order(modu_head[,1]),
order(modu_head[,1])]
m <- congro_overall
m[upper.tri(congro_overall, diag = T)] <- NA
rpls_val <- paste("r-PLS =",
round(integ_test_4mod$r.pls.mat, 3))
p_val <- paste("P =", integ_test_4mod$pairwise.P.values)
parts <- levels(part_overall2)
par(mar = c(4, 7, 6, 4))
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
title(main = "Landmarks congruence matrix",
line = 5)
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 1)
axis(side = 2,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2, las = 3)
axis(side = 4,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 3,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
legend(x = -5,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1)
# Possible artifact from alignment of left and right mandibles. May artificially
# increase correlation between homologous landmarks
#-------------------------------------------------------------------------------
# 3D deformations
# Make function to import single tps files
import.single.tps <- function(x) {
sc <- scan(x, what = "character")
raw_coo <- as.numeric(sc[-grep(pattern = "=",
x = sc)])
p <- as.numeric(sub(pattern = "LM=",
replacement = "",
x = sc[grep(pattern = "LM=", sc)]))
k <- length(raw_coo) / p
m <- matrix(data = raw_coo,
nrow = p,
ncol = k,
byrow = T)
}
# Import 3D templates (not the same coordinate system as aligned shapes)
LM_templ <- import.single.tps("data/LM_templates/LM_left_mandi_only.tps")
RM_templ <- import.single.tps("data/LM_templates/LM_right_mandi_only.tps")
head_templ <- import.single.tps("data/LM_templates/LM_head_only.tps")
plot3d(LM_templ, aspect = T)
plot3d(RM_templ, aspect = T)
plot3d(head_templ, aspect = T)
#-------------------------------------------------------------------------------
# Load landmark template
LM_template <- read.csv("data/LM_template.csv")
#Make modularity models dataframe
names_LM <- LM_template[,1]
no_modularity <- rep(1,
length(names_LM))
# No modularity: all landmarks are in only one module
head_mand <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 1, 1)
# Two modules:
#The head = 1
#The mandibles (together as one module) = 2
head_mand_sens <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 4, 4)
# Three modules:
#The head capsule = 1,
#The mandibles = 2,
#The sensory structures = 4
head_mand_asym <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, 1, 1)
# Three modules:
# The head capsule = 1
# The right mandible = 2
# The left mandible = 3
head_mand_asym_sens <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, 4, 4)
# Four modules:
# The head capsule = 1
# The right mandible = 2
# The left mandible = 3
# Sensory structures = 4
ventral_dorsal <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 4, 4)
# Two modules:
# The dorsal part of the head (eyes, ocelli, antennae...)
# The mandibles, associated with ventral part of the head (tentorium...)
half_half <- c(NA, NA, 1, 1, 1, 1, 1, 1, NA, 2,
2, 2, 2, 2, 2, NA, 1, 2, 1, 2,
1, 1, 1, 2, 2, 2, 1, 2, 1, 1,
1, 1, 2, 2, 2, 2, 1, 2)
# Two modules:
# Left side of head and mandibles
# Right side
# Midline landmarks excludede
mandi_only <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, NA, NA)
# Two modules:
# Left mandible
# Right mandible
abbrev_LM <- LM_template$Name
df_modul_models <- data.frame(name = names_LM,
no_modul = no_modularity,
head_mand = head_mand,
head_mand_sens = head_mand_sens,
head_mand_asym = head_mand_asym,
head_mand_asym_sens = head_mand_asym_sens,
ventral_dorsal = ventral_dorsal,
half_half = half_half,
mandi_only = mandi_only,
abbrev = abbrev_LM)
df_modul_models <- df_modul_models[-c(8:10),]
DF <- df_modul_models
#-------------------------------------------------------------------------------
modu_head <- DF[which(DF[,6] == 1 | DF[,6] ==  4),
c(6, 10)]
mod_test_head <- modularity.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999,
CI = T)
integ_test_head <- integration.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999)
plot(A_overall[,2:3,1], asp= 1)
part_overall <- as.factor(c(rep("head", 17),
rep("LM", 9),
rep("RM", 9)))
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
levels(part_overall2)[1:2] <- c("head", "sensory")
integ_test_3mod <- integration.test(A = A_overall,
partition.gp = part_overall,
iter = 999)
integ_test_4mod <- integration.test(A = A_overall,
partition.gp = part_overall2,
iter = 999)
#-------------------------------------------------------------------------------
# New matrix plot with reordered LMs, and integration test results
modo_head <- modu_head[order(modu_head[,1]),]
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[order(modu_head[,1])]
congro_overall <- congru_overall
congro_overall[1:17, 1:17] <- congro_overall[order(modu_head[,1]),
order(modu_head[,1])]
m <- congro_overall
m[upper.tri(congro_overall, diag = T)] <- NA
rpls_val <- paste("r-PLS =",
round(integ_test_4mod$r.pls.mat, 3))
p_val <- paste("P =", integ_test_4mod$pairwise.P.values)
parts <- levels(part_overall2)
par(mar = c(4, 7, 6, 4))
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
title(main = "Landmarks congruence matrix",
line = 5)
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 1)
axis(side = 2,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2, las = 3)
axis(side = 4,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 3,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
legend(x = -5,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1)
# Possible artifact from alignment of left and right mandibles. May artificially
# increase correlation between homologous landmarks
#-------------------------------------------------------------------------------
# 3D deformations
# Make function to import single tps files
import.single.tps <- function(x) {
sc <- scan(x, what = "character")
raw_coo <- as.numeric(sc[-grep(pattern = "=",
x = sc)])
p <- as.numeric(sub(pattern = "LM=",
replacement = "",
x = sc[grep(pattern = "LM=", sc)]))
k <- length(raw_coo) / p
m <- matrix(data = raw_coo,
nrow = p,
ncol = k,
byrow = T)
}
# Import 3D templates (not the same coordinate system as aligned shapes)
LM_templ <- import.single.tps("data/LM_templates/LM_left_mandi_only.tps")
RM_templ <- import.single.tps("data/LM_templates/LM_right_mandi_only.tps")
head_templ <- import.single.tps("data/LM_templates/LM_head_only.tps")
plot3d(LM_templ, aspect = T)
plot3d(RM_templ, aspect = T)
plot3d(head_templ, aspect = T)
m
lab_congro
lab_congru
label_head <- DF[-c(LM_LM, LM_RM), 10]
label_LM <- DF[LM_LM, 10]
label_RM <- DF[LM_RM, 10]
lab_congru <- c(label_head, label_LM, label_RM)
modu_head <- DF[which(DF[,6] == 1 | DF[,6] ==  4),
c(6, 10)]
mod_test_head <- modularity.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999,
CI = T)
integ_test_head <- integration.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999)
plot(A_overall[,2:3,1], asp= 1)
part_overall <- as.factor(c(rep("head", 17),
rep("LM", 9),
rep("RM", 9)))
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
levels(part_overall2)[1:2] <- c("head", "sensory")
integ_test_3mod <- integration.test(A = A_overall,
partition.gp = part_overall,
iter = 999)
integ_test_4mod <- integration.test(A = A_overall,
partition.gp = part_overall2,
iter = 999)
#-------------------------------------------------------------------------------
# New matrix plot with reordered LMs, and integration test results
modo_head <- modu_head[order(modu_head[,1]),]
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[order(modu_head[,1])]
congro_overall <- congru_overall
congro_overall[1:17, 1:17] <- congro_overall[order(modu_head[,1]),
order(modu_head[,1])]
m <- congro_overall
m[upper.tri(congro_overall, diag = T)] <- NA
rpls_val <- paste("r-PLS =",
round(integ_test_4mod$r.pls.mat, 3))
p_val <- paste("P =", integ_test_4mod$pairwise.P.values)
parts <- levels(part_overall2)
par(mar = c(4, 7, 6, 4))
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
title(main = "Landmarks congruence matrix",
line = 5)
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 1)
axis(side = 2,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2, las = 3)
axis(side = 4,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 3,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
legend(x = -5,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1)
legend(x = -3,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15)
legend(x = -4,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15)
par(mar = c(4, 8, 6, 4))
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
title(main = "Landmarks congruence matrix",
line = 5)
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 1)
axis(side = 2,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2, las = 3)
axis(side = 4,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 3,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
legend(x = -4,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1)
import.single.tps <- function(x) {
sc <- scan(x, what = "character")
raw_coo <- as.numeric(sc[-grep(pattern = "=",
x = sc)])
p <- as.numeric(sub(pattern = "LM=",
replacement = "",
x = sc[grep(pattern = "LM=", sc)]))
k <- length(raw_coo) / p
m <- matrix(data = raw_coo,
nrow = p,
ncol = k,
byrow = T)
}
bilatsym_mand$DA.component
plot(bilatsym_mand$DA.component[,2:3,1]
)
plot(bilatsym_mand$DA.component[,2:3,1], asp =1)
plot(bilatsym_mand$DA.component[,1:2,1], asp =1)
plot(bilatsym_mand$DA.component[,c(1,3),1], asp =1)
plot(bilatsym_mand$DA.component[,c(1,3),1], asp =1, pch = 19)
points(bilatsym_mand$DA.component[,c(1,3),2], col=2, pch = 19)
