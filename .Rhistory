P_fac <- as.factor(partition)
n <- dim(A)[3]
p <- dim(A)[1]
k <- dim(A)[2]
cooM <- matrix(NA,
nrow = n,
ncol = p * k)
for (i in 1:dim(A)[3]) {cooM[i,] <- c(t(A[,,i]))}
covM <- cov(cooM)
corM <- cor(cooM)
congruM <- dotcorr(A)
o <- order(P_fac)
congruMo <- congruM[o, o]
oo <- c(t(cbind(o * 3 - 2,
o * 3 - 1,
o * 3)))
covMo <- covM[oo, oo]
corMo <- corM[oo, oo]
l_part <- table(P_fac)
l_part_coo <- l_part * 3
layout(matrix(1:2, ncol = 2))
image(x = 1:dim(covMo)[1],
y = 1:dim(covMo)[1],
z = covMo,
col = color,
main = "Coordinates covariance matrix")
image(x = 1:dim(congruMo)[1],
y = 1:dim(congruMo)[1],
z = congruMo,
col = color,
main = "Landmarks correlation matrix")
}
covar.modules(A=av_A, partition = DF[,5])
image(x = 1:105, y = 1:105, z = covM_3mod, col = cols)
abline(v = c(27.5, 55.5),
h = c(27.5, 55.5),
lwd = 3,
col = "grey")
image(x = 1:105, y = 1:105, z = corM_3mod, col = cols)
abline(v = c(27.5, 55.5),
h = c(27.5, 55.5),
lwd = 3,
col = "grey")
covar.modules <- function(A,
partition,
part.names = sort(unique(partition)),
color = hcl.colors(20,
palette = "viridis",
alpha = NULL,
rev = FALSE,
fixup = TRUE)) {
P_fac <- as.factor(partition)
n <- dim(A)[3]
p <- dim(A)[1]
k <- dim(A)[2]
cooM <- matrix(NA,
nrow = n,
ncol = p * k)
for (i in 1:dim(A)[3]) {cooM[i,] <- c(t(A[,,i]))}
covM <- abs(cov(cooM))
corM <- abs(cor(cooM))
congruM <- abs(dotcorr(A))
o <- order(P_fac)
congruMo <- congruM[o, o]
oo <- c(t(cbind(o * 3 - 2,
o * 3 - 1,
o * 3)))
covMo <- covM[oo, oo]
corMo <- corM[oo, oo]
l_part <- table(P_fac)
l_part_coo <- l_part * 3
layout(matrix(1:2, ncol = 2))
image(x = 1:dim(covMo)[1],
y = 1:dim(covMo)[1],
z = covMo,
col = color,
main = "Coordinates covariance matrix")
image(x = 1:dim(congruMo)[1],
y = 1:dim(congruMo)[1],
z = congruMo,
col = color,
main = "Landmarks correlation matrix")
}
covar.modules(A=av_A, partition = DF[,5])
covar.modules(A=av_A, partition = DF[,4])
covar.modules(A=av_A, partition = DF[,3])
?cumcum
?cumsum
l_part
cumsum(lpart)
cumsum(l_part)
abline(v = cumsum(l_part) + 0.5,
h = cumsum(l_part) + 0.5,
lwd = 3,
col = "grey")
covar.modules <- function(A,
partition,
part.names = sort(unique(partition)),
color = hcl.colors(20,
palette = "viridis",
alpha = NULL,
rev = FALSE,
fixup = TRUE)) {
P_fac <- as.factor(partition)
n <- dim(A)[3]
p <- dim(A)[1]
k <- dim(A)[2]
cooM <- matrix(NA,
nrow = n,
ncol = p * k)
for (i in 1:dim(A)[3]) {cooM[i,] <- c(t(A[,,i]))}
covM <- abs(cov(cooM))
corM <- abs(cor(cooM))
congruM <- abs(dotcorr(A))
o <- order(P_fac)
congruMo <- congruM[o, o]
oo <- c(t(cbind(o * 3 - 2,
o * 3 - 1,
o * 3)))
covMo <- covM[oo, oo]
corMo <- corM[oo, oo]
l_part <- table(P_fac)
l_part_coo <- l_part * 3
layout(matrix(1:2, ncol = 2))
image(x = 1:dim(covMo)[1],
y = 1:dim(covMo)[1],
z = covMo,
col = color,
main = "Coordinates covariance matrix")
abline(v = cumsum(l_part_coo) + 0.5,
h = cumsum(l_part_coo) + 0.5,
lwd = 3,
col = "grey")
image(x = 1:dim(congruMo)[1],
y = 1:dim(congruMo)[1],
z = congruMo,
col = color,
main = "Landmarks correlation matrix")
abline(v = cumsum(l_part) + 0.5,
h = cumsum(l_part) + 0.5,
lwd = 3,
col = "grey")
}
covar.modules(A=av_A, partition = DF[,3])
covar.modules(A=av_A, partition = DF[,4])
DF[,4]
DF[,5]
covar.modules(A=av_A, partition = DF[,5])
covar.modules(A=av_A, partition = DF[,6])
covar.modules(A=av_A, partition = DF[,7])
text(20,36, "test", xpd = T)
text(20,37, "test", xpd = T)
text(cumsum(l_part)/2, 37, "test", xpd=T)
l_part
cumsum(l_part)/2
?cumsum
cumsum(l_part)
apply(cumsum(l_part), 1, mean
)
apply(matrix(cumsum(l_part)), 1, mean)
approx(cumsum(l_part))
approx(cumsum(l_part), n = length(cumsum(l_part)*2-1))
csm<-cumsum(l_part)
csm[-length(csm)] + diff(csm) /2
diff(csm)
?diff
csm[-length(csm)]
diff(csm)
covar.modules <- function(A,
partition,
part.names = sort(unique(partition)),
color = hcl.colors(20,
palette = "viridis",
alpha = NULL,
rev = FALSE,
fixup = TRUE)) {
P_fac <- as.factor(partition) # Mking sure this is a factor
# Define dimensions
n <- dim(A)[3]
p <- dim(A)[1]
k <- dim(A)[2]
#Empty matrix for coordinates
cooM <- matrix(NA,
nrow = n,
ncol = p * k)
# Fill matrix with coordinates (columns) for each individual (row)
for (i in 1:dim(A)[3]) {cooM[i,] <- c(t(A[,,i]))}
# Compute covariance and correlation matrices for all coordinates
covM <- abs(cov(cooM))
corM <- abs(cor(cooM))
# Compute congruence matrix for LANDMARKS (combined coordinates)
congruM <- abs(dotcorr(A))
# Reorder matrices so that columns of the same module are together
o <- order(P_fac)
congruMo <- congruM[o, o]
oo <- c(t(cbind(o * 3 - 2,
o * 3 - 1,
o * 3)))
covMo <- covM[oo, oo]
corMo <- corM[oo, oo]
# Number of columns belonging to each module
l_part <- table(P_fac)
l_part_coo <- l_part * 3
# Start plotting
layout(matrix(1:2, ncol = 2))
# Plot full covar matrix (i.e. for coordinates)
image(x = 1:dim(covMo)[1],
y = 1:dim(covMo)[1],
z = covMo,
col = color,
main = "Coordinates covariance matrix")
abline(v = cumsum(l_part_coo) + 0.5,
h = cumsum(l_part_coo) + 0.5,
lwd = 3,
col = "grey") # Add lines separating the different modules
text(x = cumsum(l_part_coo),
y = p * k + 2,
labels = part.names,
xpd = T)
text(y = cumsum(l_part_coo),
x = p * k + 2,
labels = part.names,
xpd = T,
srt = 90)
# Plot correl matrix for landmarks
image(x = 1:dim(congruMo)[1],
y = 1:dim(congruMo)[1],
z = congruMo,
col = color,
main = "Landmarks correlation matrix")
abline(v = cumsum(l_part) + 0.5,
h = cumsum(l_part) + 0.5,
lwd = 3,
col = "grey") # Add lines separating modules
text(x = cumsum(l_part),
y = p + 2,
labels = part.names,
xpd = T)
text(y = cumsum(l_part),
x = p + 2,
labels = part.names,
xpd = T,
srt = 90)
}
covar.modules(A=av_A, partition = DF[,3])
covar.modules <- function(A,
partition,
part.names = sort(unique(partition)),
color = hcl.colors(20,
palette = "viridis",
alpha = NULL,
rev = FALSE,
fixup = TRUE)) {
P_fac <- as.factor(partition) # Mking sure this is a factor
# Define dimensions
n <- dim(A)[3]
p <- dim(A)[1]
k <- dim(A)[2]
#Empty matrix for coordinates
cooM <- matrix(NA,
nrow = n,
ncol = p * k)
# Fill matrix with coordinates (columns) for each individual (row)
for (i in 1:dim(A)[3]) {cooM[i,] <- c(t(A[,,i]))}
# Compute covariance and correlation matrices for all coordinates
covM <- abs(cov(cooM))
corM <- abs(cor(cooM))
# Compute congruence matrix for LANDMARKS (combined coordinates)
congruM <- abs(dotcorr(A))
# Reorder matrices so that columns of the same module are together
o <- order(P_fac)
congruMo <- congruM[o, o]
oo <- c(t(cbind(o * 3 - 2,
o * 3 - 1,
o * 3)))
covMo <- covM[oo, oo]
corMo <- corM[oo, oo]
# Number of columns belonging to each module
l_part <- table(P_fac)
l_part_coo <- l_part * 3
# Start plotting
layout(matrix(1:2, ncol = 2))
# Plot full covar matrix (i.e. for coordinates)
image(x = 1:dim(covMo)[1],
y = 1:dim(covMo)[1],
z = covMo,
col = color,
main = "Coordinates covariance matrix")
abline(v = cumsum(l_part_coo) + 0.5,
h = cumsum(l_part_coo) + 0.5,
lwd = 3,
col = "grey") # Add lines separating the different modules
text(x = cumsum(l_part_coo)[-length(cumsum(l_part_coo))] +
diff(cumsum(l_part_coo)) / 2,
y = p * k + 5,
labels = part.names,
xpd = T)
text(y = cumsum(l_part_coo)[-length(cumsum(l_part_coo))] +
diff(cumsum(l_part_coo)) / 2,
x = p * k + 5,
labels = part.names,
xpd = T,
srt = 90)
# Plot correl matrix for landmarks
image(x = 1:dim(congruMo)[1],
y = 1:dim(congruMo)[1],
z = congruMo,
col = color,
main = "Landmarks correlation matrix")
abline(v = cumsum(l_part) + 0.5,
h = cumsum(l_part) + 0.5,
lwd = 3,
col = "grey") # Add lines separating modules
text(x = cumsum(l_part)[-length(cumsum(l_part))] + diff(cumsum(l_part)) / 2,
y = p + 2,
labels = part.names,
xpd = T)
text(y = cumsum(l_part)[-length(cumsum(l_part))] + diff(cumsum(l_part)) / 2,
x = p + 2,
labels = part.names,
xpd = T,
srt = 90)
}
covar.modules(A=av_A, partition = DF[,3])
covar.modules(A=av_A, partition = DF[,4])
csm + diff(csm) / 2
csm
?diff
l_part
cumsum(l_part)
c(0,cumsum(l_part))
diff(c(0,cumsum(l_part)))
diff(c(0,cumsum(l_part)))/2
cms <- c(0, cumsum(l_part))
cms
vt <- cms[-length(cms)] + diff(cms) / 2
vt
covar.modules <- function(A,
partition,
part.names = sort(unique(partition)),
color = hcl.colors(20,
palette = "viridis",
alpha = NULL,
rev = FALSE,
fixup = TRUE)) {
P_fac <- as.factor(partition) # Mking sure this is a factor
# Define dimensions
n <- dim(A)[3]
p <- dim(A)[1]
k <- dim(A)[2]
#Empty matrix for coordinates
cooM <- matrix(NA,
nrow = n,
ncol = p * k)
# Fill matrix with coordinates (columns) for each individual (row)
for (i in 1:dim(A)[3]) {cooM[i,] <- c(t(A[,,i]))}
# Compute covariance and correlation matrices for all coordinates
covM <- abs(cov(cooM))
corM <- abs(cor(cooM))
# Compute congruence matrix for LANDMARKS (combined coordinates)
congruM <- abs(dotcorr(A))
# Reorder matrices so that columns of the same module are together
o <- order(P_fac)
congruMo <- congruM[o, o]
oo <- c(t(cbind(o * 3 - 2,
o * 3 - 1,
o * 3)))
covMo <- covM[oo, oo]
corMo <- corM[oo, oo]
# Number of columns belonging to each module
l_part <- table(P_fac)
l_part_coo <- l_part * 3
# Start plotting
layout(matrix(1:2, ncol = 2))
# Plot full covar matrix (i.e. for coordinates)
image(x = 1:dim(covMo)[1],
y = 1:dim(covMo)[1],
z = covMo,
col = color,
main = "Coordinates covariance matrix")
abline(v = cumsum(l_part_coo) + 0.5,
h = cumsum(l_part_coo) + 0.5,
lwd = 3,
col = "grey") # Add lines separating the different modules
cms <- c(0, cumsum(l_part_coo))
vt <- cms[-length(cms)] + diff(cms) / 2
text(x = vt,
y = p * k + 5,
labels = part.names,
xpd = T)
text(y = vt,
x = p * k + 5,
labels = part.names,
xpd = T,
srt = 90)
# Plot correl matrix for landmarks
image(x = 1:dim(congruMo)[1],
y = 1:dim(congruMo)[1],
z = congruMo,
col = color,
main = "Landmarks correlation matrix")
abline(v = cumsum(l_part) + 0.5,
h = cumsum(l_part) + 0.5,
lwd = 3,
col = "grey") # Add lines separating modules
cms <- c(0, cumsum(l_part))
vt <- cms[-length(cms)] + diff(cms) / 2
text(x = vt,
y = p + 2,
labels = part.names,
xpd = T)
text(y = vt,
x = p + 2,
labels = part.names,
xpd = T,
srt = 90)
}
covar.modules(A=av_A, partition = DF[,4])
covar.modules(A=av_A, partition = DF[,3])
covar.modules(A=av_A, partition = DF[,3], part.names = c("head", "mandibles"))
rm(oo)
rm(o)
rm(l_part)
rm(l_part_coo)
rm(vt)
rm(cms)
covar.modules <- function(A,
partition,
part.names = sort(unique(partition)),
color = hcl.colors(20,
palette = "viridis",
alpha = NULL,
rev = FALSE,
fixup = TRUE)) {
P_fac <- as.factor(partition) # Mking sure this is a factor
# Define dimensions
n <- dim(A)[3]
p <- dim(A)[1]
k <- dim(A)[2]
#Empty matrix for coordinates
cooM <- matrix(NA,
nrow = n,
ncol = p * k)
# Fill matrix with coordinates (columns) for each individual (row)
for (i in 1:dim(A)[3]) {cooM[i,] <- c(t(A[,,i]))}
# Compute covariance and correlation matrices for all coordinates
covM <- abs(cov(cooM))
corM <- abs(cor(cooM))
# Compute congruence matrix for LANDMARKS (combined coordinates)
congruM <- abs(dotcorr(A))
# Reorder matrices so that columns of the same module are together
o <- order(P_fac)
congruMo <- congruM[o, o]
oo <- c(t(cbind(o * 3 - 2,
o * 3 - 1,
o * 3)))
covMo <- covM[oo, oo]
corMo <- corM[oo, oo]
# Number of columns belonging to each module
l_part <- table(P_fac)
l_part_coo <- l_part * 3
# Start plotting
layout(matrix(1:2, ncol = 2))
# Plot full covar matrix (i.e. for coordinates)
image(x = 1:dim(covMo)[1],
y = 1:dim(covMo)[1],
z = covMo,
col = color,
main = "Coordinates covariance matrix")
abline(v = cumsum(l_part_coo) + 0.5,
h = cumsum(l_part_coo) + 0.5,
lwd = 3,
col = "grey") # Add lines separating the different modules
cms <- c(0, cumsum(l_part_coo))
vt <- cms[-length(cms)] + diff(cms) / 2
text(x = vt,
y = p * k + 5,
labels = part.names,
xpd = T)
text(y = vt,
x = p * k + 5,
labels = part.names,
xpd = T,
srt = 90)
# Plot correl matrix for landmarks
image(x = 1:dim(congruMo)[1],
y = 1:dim(congruMo)[1],
z = congruMo,
col = color,
main = "Landmarks correlation matrix")
abline(v = cumsum(l_part) + 0.5,
h = cumsum(l_part) + 0.5,
lwd = 3,
col = "grey") # Add lines separating modules
cms <- c(0, cumsum(l_part))
vt <- cms[-length(cms)] + diff(cms) / 2
text(x = vt,
y = p + 2,
labels = part.names,
xpd = T)
text(y = vt,
x = p + 2,
labels = part.names,
xpd = T,
srt = 90)
}
covar.modules(A=av_A, partition = DF[,4])
covar.modules(A=av_A, partition = DF[,4], part.names = c("head", "mandibles", "sensory"))
covar.modules(A=av_A, partition = DF[,5], part.names = c("head", "right mandi", "left mandi"))
covar.modules(A=av_A,
partition = DF[,5],
part.names = c("head", "mandi_R", "mandi_L"))
