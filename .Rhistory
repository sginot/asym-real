byrow = T)
names(ls)[i] <- nam
}
name <- names(ls)
arr <- array(data = NA,
dim = c(dim(ls[[1]]), length(ls)))
for (i in 1:length(ls)) {arr[,,i] <- ls[[i]]}
arr <- arr[-c(8:10),,]
# LM 9 was not digitizable properly in all specimens
# LM 8 and 10 are imprecise?
arr <- arr[,,-grep("0497",
x = name)] # Specimen 0497 was an outlier, probably another species
dat <- dat[-which(dat$ID == 497),]
name <- name[-grep("0497",
x = name)]
#-------------------------------------------------------------------------------
# Procrustes
pA <- pgpa(A = arr)
#-------------------------------------------------------------------------------
shapes <- pA$rotated
csiz <- pA$cent.size
mat_shps <- matrix(data = NA,
nrow = dim(shapes)[3],
ncol = dim(shapes)[1] * dim(shapes)[2])
for (i in 1:dim(shapes)[3]) {
mat_shps[i,] <- as.vector(t(shapes[,,i]))
}
replic <- rep(0,
length(name))
replic[grep("REPLICATE",
name)] <- 1
sex <- as.factor(dat$sex)
body_siz <- dat$body.l
head_w <- dat$head.w
head_l <- dat$head.l
head_h <- dat$head.h
bf <- dat$max_bf
#-------------------------------------------------------------------------------
# Shapes PCA
pca <- prcomp(mat_shps)
plot(pca$x[,1:2], pch = c(15, 17)[as.factor(replic)])
plot(shapes[,1,],
shapes[,2,])
plot(shapes[,1,],
shapes[,2,],
asp = 1)
plot(shapes[,3,],
shapes[,2,],
asp = 1)
plot(pca$x[,1:2],
pch = c(15, 17)[as.factor(replic)])
for (i in 1:length(replic)/2) {
lines(pca$x[c(i*2-1, i*2), 1:2])
}
plot(pca$x[,1:2],
pch = c(15, 17)[as.factor(replic)])
for (i in 1:length(replic)) {
lines(pca$x[c(i*2-1, i*2), 1:2])
}
name
name_split <- strsplit(x = name,
split = "_")
name_split
ID <- rep(NA, length(name))
name_split <- strsplit(x = name,
split = "_")
ID <- rep(NA, length(name))
for (i in 1:length(name)) {
ID[i] <- name_split[[i]][1]
}
ID
ID <- as.factor(ID)
ID
head_h
csiz.av <- tapply(X = csiz,
INDEX = ID,
FUN = mean)
cor.test(csiz.av, head_l)
cor.test(csiz.av, head_w)
cor.test(csiz.av, head_h)
PC1.av <- tapply(X = pca$x[, 1],
INDEX = ID,
FUN = mean)
PC2.av <- tapply(X = pca$x[, 2],
INDEX = ID,
FUN = mean)
plot(PC1.av,
PC2.av,
pch = c(15, 17)[sex])
cor.test(csiz.av, PC1.av)
cor.test(csiz.av, PC2.av)
pca$sdev^2 / sum(pca$sdev^2) * 100
var_exp <- pca$sdev^2 / sum(pca$sdev^2) * 100
barplot(var_exp)
setwd("Bureau/asym_real/")
# Required packages:
source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
dat <- read.csv(file = "data/data_subset.csv",
header = T,
sep = ",",
dec = ".")
fil <- list.files(path = "data/",
pattern = ".tps",
full.names = T)
ls <- list()
for (i in 1:length(fil)) {
sc <- scan(file = fil[i],
what = "character")
o <- sc[grep("LM=", sc)]
NLM <- as.numeric(sub("LM=",
replacement = "",
o))
if (length(sc) != NLM*3+2) {
warning("Not the right number of landmarks or dimension")
}
coo <- as.numeric(sc[-c(1, length(sc))])
nam <- sub(pattern = "IMAGE=",
replacement = "",
x = sc[length(sc)])
ls[[i]] <- matrix(data = coo,
nrow = NLM,
ncol = 3,
byrow = T)
names(ls)[i] <- nam
}
name <- names(ls)
arr <- array(data = NA,
dim = c(dim(ls[[1]]), length(ls)))
for (i in 1:length(ls)) {arr[,,i] <- ls[[i]]}
arr <- arr[-c(8:10),,]
arr <- arr[,,-grep("0497",
x = name)] # Specimen 0497 was an outlier, probably another species
dat <- dat[-which(dat$ID == 497),]
name <- name[-grep("0497",
x = name)]
# Procrustes
pA <- pgpa(A = arr)
shapes <- pA$rotated
csiz <- pA$cent.size
mat_shps <- matrix(data = NA,
nrow = dim(shapes)[3],
ncol = dim(shapes)[1] * dim(shapes)[2])
for (i in 1:dim(shapes)[3]) {
mat_shps[i,] <- as.vector(t(shapes[,,i]))
}
replic <- rep(0,
length(name))
replic[grep("REPLICATE",
name)] <- 1
sex <- as.factor(dat$sex)
body_siz <- dat$body.l
head_w <- dat$head.w
head_l <- dat$head.l
head_h <- dat$head.h
bf <- dat$max_bf
pca <- prcomp(mat_shps)
var_exp <- pca$sdev^2 / sum(pca$sdev^2) * 100
plot(pca$x[,1:2],
pch = c(15, 17)[as.factor(replic)])
for (i in 1:length(replic)) {
lines(pca$x[c(i*2-1, i*2), 1:2])
}
plot(shapes[,1,],
shapes[,2,],
asp = 1)
plot3d(shapes[,,1])
name_split <- strsplit(x = name,
split = "_")
ID <- rep(NA, length(name))
for (i in 1:length(name)) {
ID[i] <- name_split[[i]][1]
}
ID <- as.factor(ID)
csiz.av <- tapply(X = csiz,
INDEX = ID,
FUN = mean)
PC1.av <- tapply(X = pca$x[, 1],
INDEX = ID,
FUN = mean)
PC2.av <- tapply(X = pca$x[, 2],
INDEX = ID,
FUN = mean)
cor.test(csiz.av, head_h)
cor.test(csiz.av, head_w)
cor.test(csiz.av, head_l)
cor.test(csiz.av, PC1.av)
cor.test(csiz.av, PC2.av)
plot(PC1.av,
PC2.av,
pch = c(15, 17)[sex])
plot(PC1.av,
PC2.av,
pch = c(15, 17)[sex],
asp = 1)
cor.test(csiz.av, bf)
b
bf
dat
dat <- read.csv(file = "data/data_subset.csv",
header = T,
sep = ",",
dec = ".")
fil <- list.files(path = "data/",
pattern = ".tps",
full.names = T)
ls <- list()
for (i in 1:length(fil)) {
sc <- scan(file = fil[i],
what = "character")
o <- sc[grep("LM=", sc)]
NLM <- as.numeric(sub("LM=",
replacement = "",
o))
if (length(sc) != NLM*3+2) {
warning("Not the right number of landmarks or dimension")
}
coo <- as.numeric(sc[-c(1, length(sc))])
nam <- sub(pattern = "IMAGE=",
replacement = "",
x = sc[length(sc)])
ls[[i]] <- matrix(data = coo,
nrow = NLM,
ncol = 3,
byrow = T)
names(ls)[i] <- nam
}
name <- names(ls)
arr <- array(data = NA,
dim = c(dim(ls[[1]]), length(ls)))
for (i in 1:length(ls)) {arr[,,i] <- ls[[i]]}
arr <- arr[-c(8:10),,]
arr <- arr[,,-grep("0497",
x = name)] # Specimen 0497 was an outlier, probably another species
dat <- dat[-which(dat$ID == 497),]
name <- name[-grep("0497",
x = name)]
# Procrustes
pA <- pgpa(A = arr)
shapes <- pA$rotated
csiz <- pA$cent.size
mat_shps <- matrix(data = NA,
nrow = dim(shapes)[3],
ncol = dim(shapes)[1] * dim(shapes)[2])
for (i in 1:dim(shapes)[3]) {
mat_shps[i,] <- as.vector(t(shapes[,,i]))
}
replic <- rep(0,
length(name))
replic[grep("REPLICATE",
name)] <- 1
sex <- as.factor(dat$sex)
body_siz <- dat$body.l
head_w <- dat$head.w
head_l <- dat$head.l
head_h <- dat$head.h
bf <- dat$max_bf
bf2 <- dat$bf.max
bf2
cor.test(bf,bf2)
mbf2 <- dat$bf.mean
mbf <- dat$mean_bf
cor.test(mbf,mbf2)
cor.test(bf,mbf2)
cor.test(bf,csiz)
pca <- prcomp(mat_shps)
var_exp <- pca$sdev^2 / sum(pca$sdev^2) * 100
plot(pca$x[,1:2],
pch = c(15, 17)[as.factor(replic)])
for (i in 1:length(replic)) {
lines(pca$x[c(i*2-1, i*2), 1:2])
}
plot(shapes[,1,],
shapes[,2,],
asp = 1)
plot(shapes[,3,],
shapes[,2,],
asp = 1)
name_split <- strsplit(x = name,
split = "_")
ID <- rep(NA, length(name))
for (i in 1:length(name)) {
ID[i] <- name_split[[i]][1]
}
ID <- as.factor(ID)
csiz.av <- tapply(X = csiz,
INDEX = ID,
FUN = mean)
PC1.av <- tapply(X = pca$x[, 1],
INDEX = ID,
FUN = mean)
PC2.av <- tapply(X = pca$x[, 2],
INDEX = ID,
FUN = mean)
cor.test(csiz.av, head_h)
cor.test(csiz.av, head_w)
cor.test(csiz.av, head_l)
cor.test(csiz.av, PC1.av)
cor.test(csiz.av, PC2.av)
cor.test(csiz.av, bf)
cor.test(csiz.av, bf2)
cor.test(csiz.av, mbf2)
cor.test(csiz.av, mbf)
cor.test(body_siz, bf)
cor.test(body_siz, bf2)
cor.test(body_siz, mbf2)
cor.test(body_siz, mbf)
cor.test(head_h, mbf)
cor.test(head_h, mbf2)
cor.test(head_h, bf2)
cor.test(head_h, bf)
cor.test(head_l, bf2)
plot(head_l, bf2)
plot(head_l, bf2, pch=c(15,17)[sex])
summary(aov(lm(bf2 ~ csiz.av * sex)))
summary(aov(lm(bf2 ~ csiz.av + sex)))
summary(aov(lm(bf2 ~ sex)))
cor.test(PC1.av, bf)
cor.test(PC2.av, bf)
cor.test(PC3.av, bf)
cor.test(PC3.av, bf2)
cor.test(PC2.av, bf2)
cor.test(PC1.av, bf2)
cor.test(PC1.av, mbf2)
cor.test(PC1.av, mbf)
cor.test(PC2.av, mbf)
cor.test(PC2.av, mbf2)
source("../repo/001_functions.R")
# Required packages:
library(abind)
source("Rfunctions1.txt")
reord_LM <- locate.reorder(shape = pA$mshape)
plot(pA$mshape[,c(1,2),])
plot(pA$mshape
)
plot(pA$mshape[,c(1,2)])
plot(pA$mshape[,c(2,3)])
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
# Required packages:
library(abind)
source("../repo/001_functions.R")
source("../repo/002_asym_components.R")
source("Rfunctions1.txt")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
# Required packages:
library(abind)
source("../repo/001_functions.R")
source("../repo/002_asym_components.R")
source("Rfunctions1.txt")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
# Required packages:
library(abind)
source("../repo/001_functions.R")
source("../repo/002_asym_components.R")
source("Rfunctions1.txt")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
dim(pA$rotated)
decomp_asym <- mv.asym(A = pA$rotated,
reorder.LM = reord_LM,
Nrep = 1)
decomp_asym
decomp_asym$M
decomp_asym$matshp
plot(decomp_asym$PCA.sym)
plot(decomp_asym$PCA.sym$x[,1:2])
plot(decomp_asym$PCA.sym$x[,1:2], asp =1)
plot(pca$x[,1:2])
plot(PC1.av, PC2.av, asp=1)
plot(decomp_asym$PCA.sym$x[,1:2], asp =1)
plot(decomp_asym$PCA.asym$x[,1:2], asp =1)
cor.test(decomp_asym$PCA.sym$x[,1:2])
cor.test(decomp_asym$PCA.sym$x[,1], decomp_asym$PCA.sym$x[,2])
cor.test(decomp_asym$PCA.asym$x[,1], decomp_asym$PCA.asym$x[,2])
decomp_asym$M
plot(decomp_asym$PCA.asym$x[,1:2],
asp = 1,
xlab = c(-max(abs(decomp_asym$PCA.asym$x[, 1])),
max(abs(decomp_asym$PCA.asym$x[, 1]))),
ylab = c(-max(abs(decomp_asym$PCA.asym$x[, 2])),
max(abs(decomp_asym$PCA.asym$x[, 2]))))
plot(decomp_asym$PCA.asym$x[,1:2],
asp = 1,
xlim = c(-max(abs(decomp_asym$PCA.asym$x[, 1])),
max(abs(decomp_asym$PCA.asym$x[, 1]))),
ylim = c(-max(abs(decomp_asym$PCA.asym$x[, 2])),
max(abs(decomp_asym$PCA.asym$x[, 2]))))
abs(decomp_asym$PCA.asym$x[, 2])
max(abs(decomp_asym$PCA.asym$x[, 2]))
plot(decomp_asym$PCA.asym$x[,1:2],
xlim = c(-max(abs(decomp_asym$PCA.asym$x[, 1])),
max(abs(decomp_asym$PCA.asym$x[, 1]))),
ylim = c(-max(abs(decomp_asym$PCA.asym$x[, 2])),
max(abs(decomp_asym$PCA.asym$x[, 2]))))
plot(decomp_asym$PCA.asym$x[,1:2],
xlim = c(-max(abs(decomp_asym$PCA.asym$x[, 1])),
0),
ylim = c(-max(abs(decomp_asym$PCA.asym$x[, 2])),
max(abs(decomp_asym$PCA.asym$x[, 2]))))
abline(h = 0,
v = 0,
col = "gray")
cor.test(csiz.av, decomp_asym$M[, 1])
cor.test(csiz.av, decomp_asym$M[, 2])
cor.test(csiz.av, decomp_asym$M[, 3])
cor.test(csiz.av, decomp_asym$M[, 4])
cor.test(bf, decomp_asym$M[, 4])
cor.test(bf, decomp_asym$M[, ])
cor.test(bf, decomp_asym$M[, 1])
cor.test(bf, decomp_asym$M[, 2])
cor.test(bf, decomp_asym$M[, 3])
cor.test(bf, decomp_asym$M[, 1])
cor.test(bf, decomp_asym$M[, 2])
cor.test(bf, decomp_asym$M[, 1])
cor.test(bf, decomp_asym$M[, 2])
decomp_asym$M
cor.test(decomp_asym$M[,1], decomp_asym$M[, 2])
cor.test(bf, decomp_asym$M[, 3])
cor.test(bf2, decomp_asym$M[, 3])
cor.test(bf2, decomp_asym$M[, 1])
plot(decomp_asym$M[,1], bf)
plot(decomp_asym$M[,1], bf2)
plot(decomp_asym$M[,3], bf2)
plot(decomp_asym$M[,3], bf)
plot(decomp_asym$M[,3], mbf)
plot(decomp_asym$M[,3], mbf2)
plot(decomp_asym$PCA.asym[,1], mbf2)
plot(decomp_asym$PCA.asym$x[,1], mbf2)
plot(decomp_asym$M[,3], mbf2)
lm(decomp_asym$M[,3], bf2)
lm(bf ~ decomp_asym$M[,3])
summary(lm(bf ~ decomp_asym$M[,3]))
DA <- decomp_asym$M[, 3]
FA <- decomp_asym$M[, 1]
cor.test(csiz.av, DA)
cor.test(bf, DA)
linear_mod <- lm(bf ~ DA)
summary(linear_mod)
DA_sq <- DA^2
quadratic_mod <- lm(bf ~ DA + DA_sq)
summary(quadratic_mod)
quadratic_mod <- lm(bf2 ~ DA + DA_sq)
summary(quadratic_mod)
quadratic_mod <- lm(mbf ~ DA + DA_sq)
summary(quadratic_mod)
quadratic_mod <- lm(mbf2 ~ DA + DA_sq)
summary(quadratic_mod)
pred_quadra <- predict(quadratic_mod)
lines(DA, pred_quadra)
pred_quadra
pred_quadra <- predict(quadratic_mod, newdata = DA)
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA, DA_sq))
pred_quadra
lines(DA, pred_quadra)
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA = sort(DA),
DA_sq = sort(DA_sq)))
lines(DA, pred_quadra)
quadratic_mod <- lm(bf ~ abs(DA) + DA_sq)
summary(quadratic_mod)
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA = sort(abs(DA)),
DA_sq = sort(DA_sq)))
lines(DA, pred_quadra)
pred_quadra
quadratic_mod <- lm(bf ~ DA + DA_sq)
summary(quadratic_mod)
newvals <- seq(-0.2,
0,
by = 0.01)
newvals <- seq(-0.2,
0,
by = 0.01)
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA = newvals)
)
quadratic_mod
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA = newvals,
DA_sq = newvals^2))
pred_quadra
newvals
newvals <- seq(-0.2,
0,
by = 0.001)
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA = newvals,
DA_sq = newvals^2))
lines(DA, pred_quadra)
lines(newvals, pred_quadra)
newvals
pred_quadra
plot(DA, bf)
lines(newvals, pred_quadra)
summary(pred_quadra)
summary(quadratic_mod)
plot(DA, log(bf))
plot(log(DA), log(bf))
plot(log(abs(DA), log(bf))
plot(log(abs(DA)), log(bf))
Fa
plot(FA, bf)
plot(DA-FA, bf)
plot(DA+FA, bf)
