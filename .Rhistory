plot(modul_test_1$random.CR, x)
hist(modul_test_1$random.CR)
hist(x)
?boxcox_trans
box.cox
box.cox.fast()
box.cox.fast
pgpa
ppa
pPsup
?gpagen
fgpa
pgpa
fPsup
pPsup
?import_jpg
library(Momocs)
?import_jpg
matCR_intra_gpa
modularity.test()
modularity.test
geomorph:::boot.CR()
geomorph:::boot.CR
geomorph:::two.d.array()
geomorph:::two.d.array
plot(x = 1:5,
y = matCR_global_gpa[,1],
pch = 21,
bg = 1,
cex =2,
ylim = c(0.4, 1))
points(x = 1:5 + 0.1,
y = matCR_intra_gpa[,1],
pch = 21,
bg = 2,
cex =2)
for (i in 1:5) {
lines(x = rep(i, 2),
y = matCR_global_gpa[i,2:3],
lwd = 2,
col = 1)
lines(x = rep(i, 2) + 0.1,
y = matCR_intra_gpa[i,2:3],
lwd = 2,
col = 2)
}
ls_results[[1]]
ls_results[[1]][[2]]
ls_results[[2]][[2]]
A_intra_gpa
ls_results[[2]][[2]]
plot(ls_results[[2]][[2]])
hist(ls_results[[2]][[2]]$CR.boot)
abline(v = ls_results[[2]][[2]]$CR)
abline(v = quantile(ls_results[[2]][[2]]$CR.boot, 0.025, 0.975))
abline(v = quantile(ls_results[[2]][[2]]$CR.boot, 0.975))
min(ls_results[[2]][[2]]$CR.boot)
length(ls_results[[2]][[2]]$CR.boot < 0.52)
length(which(ls_results[[2]][[2]]$CR.boot < 0.52))
length(which(ls_results[[2]][[2]]$CR.boot < 0.5109))
hist(ls_results[[3]][[2]]$CR.boot)
abline(v = ls_results[[3]][[2]]$CR)
hist(ls_results[[4]][[2]]$CR.boot)
abline(v = ls_results[[4]][[2]]$CR)
ls_results[[4]][[2]]$CR
min(ls_results[[4]][[2]]$CR.boot)
hist(ls_results[[5]][[2]]$CR.boot)
abline(v = ls_results[[4]][[2]]$CR)
abline(v = ls_results[[5]][[2]]$CR)
ls_results[[5]][[2]]$CR
min(ls_results[[5]][[2]]$CR.boot)
ls_modul <- list(modul_test_1,
modul_test_2,
modul_test_3,
modul_test_4,
modul_test_5)
plot(x = 1:5,
y = matCR_global_gpa[,1],
pch = 21,
bg = 1,
cex =2,
ylim = c(0.4, 1))
points(x = 1:5 + 0.1,
y = matCR_intra_gpa[,1],
pch = 21,
bg = 2,
cex =2)
for (i in 1:5) {
lines(x = rep(i, 2),
y = c(min(ls_modul[[i]]$CR.boot),
max(ls_modul[[i]]$CR.boot)),
lwd = 2,
col = 1)
lines(x = rep(i, 2) + 0.1,
y = c(min(ls_results[[i]][[2]]$CR.boot),
max(ls_results[[i]][[2]]$CR.boot)),
lwd = 2,
col = 2)
}
?bilat.symmetry
getwd
getwd()
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
?ckpz2r
?ckpt2r
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
library(ckpt2r)
read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/0072_xxx_head.ckpt")
read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/")
CKPT_LM<-read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/")
CKPT_LM[[1]]
CKPT_LM$LM
CKPT_LM$X
CKPT_LM$defined
?array_2D_from_df
DF_CKPT <- data.frame(specimen = CKPT_LM$file_name, landmark = CKPT_LM$LM, X = CKPT_LM$X, Y = CKPT_LM$Y, Z = CKPT_LM$Z)
DF_CKPT
head(DF_CKPT)
A_CKPT<- array_2D_from_df(df = DF_CKPT)
colnames(DF_CKPT)
A_CKPT<- array_2D_from_df(df = CKPT_LM)
folder.with.landmarks <- ckpt2r_examples()
folder.with.landmarks
LM_list <- read_checkpoint(folder.with.landmarks)
LM_list
CKPT_LM
CKPT_LM<-read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/CKPT/")
CKPT_LM
A_CKPT<-array_2D_from_df(CKPT_LM)
rlang::last_error()
LM_list
array_2D<-array_2D_from_df(LM_list)
remove.packages("ckpt2r")
library(ckpt2r)
folder.with.landmarks <- ckpt2r_examples()
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
library(ckpt2r)
folder.with.landmarks <- ckpt2r_examples()
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
getwd()
setwd("C:/Users/sginot/Desktop/")
library(ckpt2r)
landmarks_df("example/", recursive = F, pattern = NULL)
landmarks_df<- read_checkpoint("example/", recursive = F, pattern = NULL)
landmarks_df
print(landmarks_df, n=42
=
print(landmarks_df, n=42)
LMDF <- landmarks_df[landmarks_df$defined == "N",]
LMDF
print(LMDF, n=50
)
array_2D <- array_2D_from_df(df,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
array_2D <- array_2D_from_df(landmarks_df,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
array_2D <- array_2D_from_df(LMDF,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
array_2D
array_2D <- array_2D[, - which(colSums(is.na(array_2D)) > 0)]
array_2D
folder.with.landmarks <- ckpt2r_examples()
landmarks_df <- read_checkpoint(folder.with.landmarks,
recursive = FALSE,
pattern = NULL)
landmarks_df <- landmarks_df[landmarks_df$defined != "M",]
array_2D <- array_2D_from_df(landmarks_df,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
landmarks_df
print(landmarks_df, n=350
)
ls_bootZ
# Required packages:
library(geomorph)
library(EMMLi)
library(abind)
library(scales)
library(paleomorph)
source("../repo/001_functions.R")
source("../repo/002_asym_components.R")
source("Rfunctions1.txt")
palette(palette.colors(palette = "Okabe-Ito"))
#-------------------------------------------------------------------------------
# Load landÃ¶ark template
LM_template <- read.csv("data/LM_template.csv")
names_LM <- LM_template[,1]
no_modularity <- rep(1,
length(names_LM))
head_mand <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 1, 1)
head_mand_sens <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 4, 4)
head_mand_asym <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, 1, 1)
head_mand_asym_sens <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, 4, 4)
ventral_dorsal <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 4, 4)
half_half <- c(NA, NA, 1, 1, 1, 1, 1, 1, NA, 2,
2, 2, 2, 2, 2, NA, 1, 2, 1, 2,
1, 1, 1, 2, 2, 2, 1, 2, 1, 1,
1, 1, 2, 2, 2, 2, 1, 2)
mandi_only <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, NA, NA)
df_modul_models <- data.frame(name = names_LM,
no_modul = no_modularity,
head_mand = head_mand,
head_mand_sens = head_mand_sens,
head_mand_asym = head_mand_asym,
head_mand_asym_sens = head_mand_asym_sens,
ventral_dorsal = ventral_dorsal,
half_half = half_half,
mandi_only = mandi_only)
df_modul_models <- df_modul_models[-c(8:10),]
DF <- df_modul_models
input_folder <- "Figures/"
template <- shapes[,,1]
oculeyeR <- c(6, 7, 34)
oculeyeL <- c(8, 10, 35)
mandiR <- c(16, 18:20, 28, 29, 24, 26, 27)
mandiL <- c(17, 21:23, 32, 33, 25, 31, 30)
dim(shapes)
A <- av_A #No need for replicates
M <- matrix(NA,
nrow = dim(A)[3],
ncol = dim(A)[2] * dim(A)[1])
for (i in 1:dim(A)[3]) {M[i,] <- c(t(A[,,i]))}
DF_3 <- data.frame(apply(X = DF,
MARGIN = 2,
FUN = rep,
each = 3))
DF_3[, 2:6] <- apply(X = DF_3[, 2:6],
MARGIN = 2,
FUN = as.numeric)
cor_M <- cor(M)
cong_M <- dotcorr(A)
# Head-nmandibles 2 modules partition
modul_test_1 <- modularity.test(A = A,
partition.gp = DF[,3],
iter = 999,
CI = T)
# Ventral head structures, sensory (dorsal) and mandibles partition 3 modules
modul_test_2 <- modularity.test(A = A,
partition.gp = DF[,4],
iter = 999,
CI = T)
# Head as a whole, mandibles separate partition (3 modules)
modul_test_3 <- modularity.test(A = A,
partition.gp = DF[,5],
iter = 999,
CI = T)
# Head ventral, head sensory and mandibles separate (4 modules)
modul_test_4 <- modularity.test(A = A,
partition.gp = DF[,6],
iter = 999,
CI = T)
# Mandibles AND head ventral together, vs head dorsal sensory (2 modules)
modul_test_5 <- modularity.test(A = A,
partition.gp = DF[,7],
iter = 999,
CI = T)
# Left and right sides of the head as 2 modules. Midline LMs removed.
modul_test_6 <- modularity.test(A = A[-which(is.na(DF[,8])),,],
partition.gp = na.omit(DF[,8]),
iter = 999,
CI = T)
# Left and right mandibles only (2 modules) all other LM removed
modul_test_7 <- modularity.test(A = A[-which(is.na(DF[,9])),,],
partition.gp = na.omit(DF[,9]),
iter = 999,
CI = T)
ls_modul <- list(modul_test_1,
modul_test_2,
modul_test_3,
modul_test_4,
modul_test_5)
modul_compar <- compare.CR(modul_test_1,
modul_test_2,
modul_test_3,
modul_test_4,
modul_test_5,
modul_test_6,
modul_test_7,
CR.null = T)
integ_test_1 <- integration.test(A = A,
partition.gp = DF[,3],
iter = 999)
integ_test_2 <- integration.test(A = A,
partition.gp = DF[,4],
iter = 999)
integ_test_3 <- integration.test(A = A,
partition.gp = DF[,5],
iter = 999)
integ_test_4 <- integration.test(A = A,
partition.gp = DF[,6],
iter = 999)
integ_test_5 <- integration.test(A = A,
partition.gp = DF[,7],
iter = 999)
integ_test_6 <- integration.test(A[-which(is.na(DF[,8])),,],
partition.gp = na.omit(DF[,8]),
iter = 999)
integ_test_7 <- integration.test(A[-which(is.na(DF[,9])),,],
partition.gp = na.omit(DF[,9]),
iter = 999)
A1 <- A[which(DF[,5] == 2),,]
A2 <- A[which(DF[,5] == 3),,]
tbpls <- two.b.pls(A1 = A1,
A2 = A2)
integ_compar <- compare.pls(integ_test_1,
integ_test_2,
integ_test_3,
integ_test_4,
integ_test_5,
integ_test_6,
integ_test_7)
modul.intra.gpa <- function(A, partition, plot.compar = T) {
mods <- unique(partition)
A_intra_gpa <- array(data = NA,
dim = dim(A))
for (i in 1:length(mods)) {
A_mod <- A[which(partition == mods[i]),,]
centroid_mod <- apply(A_mod, 2, mean)
A_mod_gpa <- pgpa(A_mod)$rotated
A_intra_gpa[which(partition == mods[i]),,] <- A_mod_gpa
#for (j in 1:dim(A_mod_gpa)[3]) {
#  A_intra_gpa[which(partition == mods[i]),,j] <-
#    t(t(A_mod_gpa[,,j]) + centroid_mod)
#}
}
if (plot.compar) {
layout(matrix(1:2,
ncol =2))
plot(x = A[,2,],
y = A[,3,],
pch = 19,
cex = 0.5,
col = partition,
asp = 1)
plot(x = A_intra_gpa[,2,],
y = A_intra_gpa[,3,],
pch = 19,
cex = 0.5,
col = partition,
asp = 1)
}
mod_test <- modularity.test(A_intra_gpa,
partition.gp = partition,
CI = T)
int_test <- integration.test(A_intra_gpa,
partition.gp = partition)
return(list(A_intra_gpa, mod_test, int_test))
}
ls_results <- list()
for (i in 1:5) {
ls_results[[i]] <- modul.intra.gpa(A,
partition = DF[,i+2],
plot.compar = T)
}
names(ls_results) <- names(DF)[3:7]
modul_compar_intra_gpa <- compare.CR(ls_results$head_mand[[2]],
ls_results$head_mand_sens[[2]],
ls_results$head_mand_asym[[2]],
ls_results$head_mand_asym_sens[[2]],
ls_results$ventral_dorsal[[2]],
CR.null = T)
intra_gpa_Z <- modul_compar_intra_gpa$sample.z
global_gpa_Z <- modul_compar$sample.z[1:6]
names(intra_gpa_Z) <- names(global_gpa_Z) <- names(DF)[2:7]
matZ <- rbind(intra_gpa_Z,
global_gpa_Z)
# Barplot for comparison
par(mar = c(11,3,2,3))
barplot(height = matZ,
beside = T,
col = 1:2,
space = c(0,2),
las = 2)
matZo <- matZ[, order(intra_gpa_Z)]
par(mar = c(11,3,2,3))
barplot(height = matZo,
beside = T,
col = 1:2,
space = c(0,2),
las = 2)
matCR_intra_gpa <- matrix(NA, ncol = 3,
nrow = length(ls_results))
for (i in 1:length(ls_results)) {
matCR_intra_gpa[i, 1] <- ls_results[[i]][[2]]$CR
matCR_intra_gpa[i, 2:3] <- ls_results[[i]][[2]]$CInterval
}
rownames(matCR_intra_gpa) <- names(ls_results)
matCR_global_gpa <- matrix(NA, ncol = 3,
nrow = 5)
rownames(matCR_global_gpa) <- names(ls_results)
matCR_global_gpa[1,] <- c(modul_test_1$CR,
modul_test_1$CInterval)
matCR_global_gpa[2,] <- c(modul_test_2$CR,
modul_test_2$CInterval)
matCR_global_gpa[3,] <- c(modul_test_3$CR,
modul_test_3$CInterval)
matCR_global_gpa[4,] <- c(modul_test_4$CR,
modul_test_4$CInterval)
matCR_global_gpa[5,] <- c(modul_test_5$CR,
modul_test_5$CInterval)
plot(x = 1:5,
y = matCR_global_gpa[,1],
pch = 21,
bg = 1,
cex =2,
ylim = c(0.4, 1))
points(x = 1:5 + 0.1,
y = matCR_intra_gpa[,1],
pch = 21,
bg = 2,
cex =2)
for (i in 1:5) {
lines(x = rep(i, 2),
y = matCR_global_gpa[i,2:3],
lwd = 2,
col = 1)
lines(x = rep(i, 2) + 0.1,
y = matCR_intra_gpa[i,2:3],
lwd = 2,
col = 2)
}
plot(x = 1:5,
y = matCR_global_gpa[,1],
pch = 21,
bg = 1,
cex =2,
ylim = c(0.4, 1))
points(x = 1:5 + 0.1,
y = matCR_intra_gpa[,1],
pch = 21,
bg = 2,
cex =2)
for (i in 1:5) {
lines(x = rep(i, 2),
y = c(min(ls_modul[[i]]$CR.boot),
max(ls_modul[[i]]$CR.boot)),
lwd = 2,
col = 1)
lines(x = rep(i, 2) + 0.1,
y = c(min(ls_results[[i]][[2]]$CR.boot),
max(ls_results[[i]][[2]]$CR.boot)),
lwd = 2,
col = 2)
}
bootZ <- function(A, partition.gp, it = 100) {
Z <- list()
i <- 1
while (i < it + 1) {
index <- sample(1:dim(A)[3],
replace = T)
Ab <- A[,,index]
test <- modularity.test(A = Ab,
partition.gp = partition.gp,
iter = 99,
CI = F)
Z[[i]] <- test$Z
i <- i + 1
}
Z}
ls_bootZ <- lapply(1:length(ls_modul),
function(i) bootZ(A = A,
partition.gp = DF[, i+2],
it = 1000))
ls_bootZ[[1]]
save.image()
plot(1:6, matZ[1,])
layout[1]
layout(1)
plot(1:6, matZ[1,])
plot(1:5, matZ[1,2:6])
plot(1:5, matZ[1,2:6], ylim = c(0,-8))
plot(1:5, matZ[2,2:6], ylim = c(0,-8))
for (i in 1:5){lines(rep(i,2), quantile(unlist(ls_bootZ[[i]]), c(0.025,0.975)))}
for (i in 1:5){lines(rep(i,2), quantile(unlist(ls_bootZ[[i]]), c(0.01,0.99)))}
ls_bootZ_intra <- lapply(1:length(ls_results),
function(i) bootZ(A = A,
partition.gp = DF[, i+2],
it = 1000))
save.image()
