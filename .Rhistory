for (i in 1:6) {
lines(x = rep(i, 2),
y = c(matZo[1,i] - matZoSE[1,i],
matZo[1,i] + matZoSE[1,i]))
}
plot(x = 1:6,
y = matZo[1,],
pch = 21,
cex = 0.5,
bg = 1)
for (i in 1:6) {
lines(x = rep(i, 2),
y = c(matZo[1,i] - matZoSE[1,i],
matZo[1,i] + matZoSE[1,i]))
}
?compare.CR
?modularity.test
modul_test_1
?integration.test
modul.intra.gpa <- function(A, partition, plot.compar = T) {
mods <- unique(partition)
A_intra_gpa <- array(data = NA,
dim = dim(A))
for (i in 1:length(mods)) {
A_mod <- A[which(partition == mods[i]),,]
centroid_mod <- apply(A_mod, 2, mean)
A_mod_gpa <- pgpa(A_mod)$rotated
A_intra_gpa[which(partition == mods[i]),,] <- A_mod_gpa
#for (j in 1:dim(A_mod_gpa)[3]) {
#  A_intra_gpa[which(partition == mods[i]),,j] <-
#    t(t(A_mod_gpa[,,j]) + centroid_mod)
#}
}
if (plot.compar) {
layout(matrix(1:2,
ncol =2))
plot(x = A[,2,],
y = A[,3,],
pch = 19,
cex = 0.5,
col = partition,
asp = 1)
plot(x = A_intra_gpa[,2,],
y = A_intra_gpa[,3,],
pch = 19,
cex = 0.5,
col = partition,
asp = 1)
}
mod_test <- modularity.test(A_intra_gpa,
partition.gp = partition,
CI = T)
int_test <- integration.test(A_intra_gpa,
partition.gp = partition)
return(list(A_intra_gpa, mod_test, int_test))
}
ls_results <- list()
for (i in 1:5) {
ls_results[[i]] <- modul.intra.gpa(A,
partition = DF[,i+2],
plot.compar = T)
}
ls_results <- list()
for (i in 1:5) {
ls_results[[i]] <- modul.intra.gpa(A,
partition = DF[,i+2],
plot.compar = T)
}
names(ls_results) <- names(DF)[3:7]
modul_compar_intra_gpa <- compare.CR(ls_results$head_mand[[2]],
ls_results$head_mand_sens[[2]],
ls_results$head_mand_asym[[2]],
ls_results$head_mand_asym_sens[[2]],
ls_results$ventral_dorsal[[2]],
CR.null = T)
ls_results$head_mand[[2]]
ls_results$head_mand[[2]]$CInterval
plot(x = 1:6,
y = matZo[1,],
pch = 21,
cex = 0.5,
bg = 1)
layout(1)
plot(x = 1:6,
y = matZo[1,],
pch = 21,
cex = 0.5,
bg = 1)
plot(x = 1:6,
y = matZ[1,],
pch = 21,
cex = 0.5,
bg = 1)
for (i in 1:5) {
lines(x = rep(i, 2),
y = c(ls_results[[i]][[2]]$CInterval))
}
i
plot(x = 1:5,
y = matZ[1,-1],
pch = 21,
cex = 0.5,
bg = 1,
ylim = c(-2, -8))
for (i in 1:5) {
lines(x = rep(i, 2),
y = c(ls_results[[i]][[2]]$CInterval))
}
c(ls_results[[i]][[2]]$CInterval)
s_results$head_mand[[2]]
ls_results$head_mand[[2]]
matZ
modul_compar_intra_gpa
ls_results
ls_results[[]][[2]]
ls_results[[1]][[2]]
ls_results[[[2]]
ls_results[][2]]
ls_results[[1]][[2]]
length(ls_results)
ls_results[[1]][[2]]$CR
ls_results[[1]][[2]]$CInterval
matCR <- matrix(NA, ncol = 3,
nrow = length(ls_results))
for (i in 1:length(ls_results)) {
matCR[i, 1] <- ls_results[[i]][[2]]$CR
matCR[i, 2:3] <- ls_results[[i]][[2]]$CInterval
}
matCR
rownames(matCR) <- names(ls_results)
matCR
?CR.te
?modularity.test
matCR_intra_gpa <- matrix(NA, ncol = 3,
nrow = length(ls_results))
for (i in 1:length(ls_results)) {
matCR_intra_gpa[i, 1] <- ls_results[[i]][[2]]$CR
matCR_intra_gpa[i, 2:3] <- ls_results[[i]][[2]]$CInterval
}
rownames(matCR_intra_gpa) <- names(ls_results)
modul_test_1
matCR_global_gpa <- matrix(NA, ncol = 3,
nrow = 5)
rownames(matCR_global_gpa) <- names(ls_results)
matCR_global_gpa[1,] <- c(modul_test_1$CR,
modul_test_1$CInterval)
matCR_global_gpa[2,] <- c(modul_test_2$CR,
modul_test_2$CInterval)
matCR_global_gpa[3,] <- c(modul_test_3$CR,
modul_test_3$CInterval)
matCR_global_gpa[4,] <- c(modul_test_4$CR,
modul_test_4$CInterval)
matCR_global_gpa[5,] <- c(modul_test_5$CR,
modul_test_5$CInterval)
matCR_global_gpa
plot(matCR_global_gpa, matCR_intra_gpa, pch = 20, cex = 2
)
plot(matCR_global_gpa[,1], matCR_intra_gpa[,1], pch = 20, cex = 2)
plot(matCR_global_gpa[,1], matCR_intra_gpa[,1], pch = 20, cex = 2, xlim = c(0,1), ylim = c(0,1))
?barplot
plot(x = 1:5,
y = matCR_global_gpa[,1],
pch = 21,
bg = 1,
cex =2,
ylim = c(0.4, 1))
1:5+0.1
points(x = 1:5 + 0.1,
y = matCR_intra_gpa[,1],
pch = 21,
bg = 2,
cex =2)
for (i in 1:5) {
lines(x = rep(i, 2),
y = matCR_global_gpa[i,2:3],
lwd = 2,
col = 1)
lines(x = rep(i, 2) + 0.1,
y = matCR_intra_gpa[i,2:3],
lwd = 2,
col = 2)
}
matCR_intra_gpa
ls_results[[1]][[2]]$CInterval
ls_results[[1]][[2]]$CR
ls_results[[2]][[2]]$CInterval
ls_results[[2]][[2]]$CR
# Barplot for comparison
par(mar = c(11,3,2,3))
barplot(height = matZ,
beside = T,
col = 1:2,
space = c(0,2),
las = 2)
matZ
plot(matZ[1,-1], matCR_intra_gpa[,1])
plot(matZ[2,-1], matCR_global_gpa[,1])
ls_results[[1]][[2]]
ls_results[[1]][[2]]$random.CR
hist(ls_results[[1]][[2]]$random.CR)
abline(v=ls_results[[1]][[2]]$CR)
?modularity.test
modul_test_1$random.CR
hist(modul_test_1$random.CR)
hist(ls_results[[1]][[2]]$random.CR)
hist(ls_results[[1]][[2]]$CR.boot)
hist(modul_test_1$CR.boot)
modul_test_1$CR.mat
modul_compar$sample.z
modul_compar$pairwise.z
mean(ls_results[[1]][[2]]$random.CR)
mean(modul_test_1$random.CR)
sd(ls_results[[1]][[2]]$random.CR)
sd(modul_test_1$random.CR)
(ls_results[[1]][[2]]$CR - mean(ls_results[[1]][[2]]$random.CR)) / sd(ls_results[[1]][[2]]$random.CR)
ls_results[[1]][[2]]$CR
(modul_test_1$CR - mean(modul_test_1$random.CR)) / sd(modul_test_1$random.CR)
modul_test_1$Z
modul_test_1$permutations
(modul_test_1$CR - mean(modul_test_1$random.CR)) / sd(modul_test_1$random.CR)/2
modularity.test()
modularity.test
(modul_test_1$CR - mean(modul_test_1$CR.boot)) / sd(modul_test_1$random.CR)
effect.size
geomorph::effect.size
library(RRPP)
?effect.size
?CR
# Required packages:
library(geomorph)
require(geomorph)
(modul_test_1$CR - mean(modul_test_1$CR.boot)) / sd(modul_test_1$CR.boot)
(modul_test_1$CR - mean(modul_test_1$random.CR)) / sd(modul_test_1$random.CR)
modul_test_1$Z
modul_test_1
modul_test_0 <- modularity.test(A=A, partition.gp = DF[,2], CI = T)
DF[,2]
A
geomorph:::effect.size
geomorph:::effect.size(modul_test_1$random.CR)
geomorph:::box.cox()
geomorph:::box.cox
geomorph:::effect.size(modul_test_1$random.CR, center =F)
sqrt((sum(modul_test_1$random.CR^2)/1000))
sd(modul_test_1$random.CR)
?sd
?geomorph:::box.cox
help(geomorph:::box.cox)
help("geomorph:::box.cox")
x <- modul_test_1$random.CR
x
geomorph:::box.cox
geomorph:::effect.size
unique(x)
geomorph:::effect.size
length(unique(x))
center <- F
x <- box.cox(x)$transformed
geomorph:::box.cox
box.cox <- function (y, eps = 0.001, iterate = FALSE)
{
result <- if (iterate)
box.cox.iter(y, eps = eps)
else box.cox.fast(y, eps = eps)
return(result)
}
x <- box.cox(x)$transformed
geomorph:::center
geomorph:::box.cox
geomorph:::box.cox.fast
box.cox.fast <- function (y, eps = 0.001)
{
if (any(y <= 0))
y = y - min(y) + 1e-04
y.obs <- y[1]
y <- y[-1]
n <- length(y)
yy <- y/exp(mean(log(y)))
logy <- log(yy)
logLik <- function(lambda) {
la <- lambda
yt <- if (abs(la) > eps)
yt <- (yy^la - 1)/la
else logy * (1 + (la * logy)/2 * (1 + (la * logy)/3 *
(1 + (la * logy)/4)))
-n/2 * log(sum(center(yt)^2))
}
result <- optimise(logLik, lower = -5, upper = 5, maximum = TRUE)
lambda.opt <- result$maximum
if (abs(lambda.opt) < eps)
lambda.opt <- 0
y <- c(y.obs, y)
res <- if (lambda.opt == 0)
log(y)
else (y^lambda.opt - 1)/lambda.opt
list(opt.lambda = lambda.opt, transformed = res, lambda = NULL,
loglik = NULL)
}
x <- box.cox(x)$transformed
x
geomorph:::center
center <- function (x)
{
if (is.vector(x))
x - mean(x)
else {
x <- as.matrix(x)
dims <- dim(x)
fast.center(x, dims[1], dims[2])
}
}
x <- box.cox(x)$transformed
x
geomorph:::effect.size()
geomorph:::effect.size
n <- length(x)
hist(x)
x <- center(x)
hist(x)
sdx <- sqrt((sum(x^2)/n))
sdx
sd(modul_test_1$random.CR)
(x[1] - mean(x))/sdx
sdx <- sqrt((sum(x^2)/(n-1)))
sdx
plot(modul_test_1$random.CR, x)
hist(modul_test_1$random.CR)
hist(x)
?boxcox_trans
box.cox
box.cox.fast()
box.cox.fast
pgpa
ppa
pPsup
?gpagen
fgpa
pgpa
fPsup
pPsup
?import_jpg
library(Momocs)
?import_jpg
matCR_intra_gpa
modularity.test()
modularity.test
geomorph:::boot.CR()
geomorph:::boot.CR
geomorph:::two.d.array()
geomorph:::two.d.array
plot(x = 1:5,
y = matCR_global_gpa[,1],
pch = 21,
bg = 1,
cex =2,
ylim = c(0.4, 1))
points(x = 1:5 + 0.1,
y = matCR_intra_gpa[,1],
pch = 21,
bg = 2,
cex =2)
for (i in 1:5) {
lines(x = rep(i, 2),
y = matCR_global_gpa[i,2:3],
lwd = 2,
col = 1)
lines(x = rep(i, 2) + 0.1,
y = matCR_intra_gpa[i,2:3],
lwd = 2,
col = 2)
}
ls_results[[1]]
ls_results[[1]][[2]]
ls_results[[2]][[2]]
A_intra_gpa
ls_results[[2]][[2]]
plot(ls_results[[2]][[2]])
hist(ls_results[[2]][[2]]$CR.boot)
abline(v = ls_results[[2]][[2]]$CR)
abline(v = quantile(ls_results[[2]][[2]]$CR.boot, 0.025, 0.975))
abline(v = quantile(ls_results[[2]][[2]]$CR.boot, 0.975))
min(ls_results[[2]][[2]]$CR.boot)
length(ls_results[[2]][[2]]$CR.boot < 0.52)
length(which(ls_results[[2]][[2]]$CR.boot < 0.52))
length(which(ls_results[[2]][[2]]$CR.boot < 0.5109))
hist(ls_results[[3]][[2]]$CR.boot)
abline(v = ls_results[[3]][[2]]$CR)
hist(ls_results[[4]][[2]]$CR.boot)
abline(v = ls_results[[4]][[2]]$CR)
ls_results[[4]][[2]]$CR
min(ls_results[[4]][[2]]$CR.boot)
hist(ls_results[[5]][[2]]$CR.boot)
abline(v = ls_results[[4]][[2]]$CR)
abline(v = ls_results[[5]][[2]]$CR)
ls_results[[5]][[2]]$CR
min(ls_results[[5]][[2]]$CR.boot)
ls_modul <- list(modul_test_1,
modul_test_2,
modul_test_3,
modul_test_4,
modul_test_5)
plot(x = 1:5,
y = matCR_global_gpa[,1],
pch = 21,
bg = 1,
cex =2,
ylim = c(0.4, 1))
points(x = 1:5 + 0.1,
y = matCR_intra_gpa[,1],
pch = 21,
bg = 2,
cex =2)
for (i in 1:5) {
lines(x = rep(i, 2),
y = c(min(ls_modul[[i]]$CR.boot),
max(ls_modul[[i]]$CR.boot)),
lwd = 2,
col = 1)
lines(x = rep(i, 2) + 0.1,
y = c(min(ls_results[[i]][[2]]$CR.boot),
max(ls_results[[i]][[2]]$CR.boot)),
lwd = 2,
col = 2)
}
?bilat.symmetry
getwd
getwd()
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
?ckpz2r
?ckpt2r
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
library(ckpt2r)
read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/0072_xxx_head.ckpt")
read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/")
CKPT_LM<-read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/")
CKPT_LM[[1]]
CKPT_LM$LM
CKPT_LM$X
CKPT_LM$defined
?array_2D_from_df
DF_CKPT <- data.frame(specimen = CKPT_LM$file_name, landmark = CKPT_LM$LM, X = CKPT_LM$X, Y = CKPT_LM$Y, Z = CKPT_LM$Z)
DF_CKPT
head(DF_CKPT)
A_CKPT<- array_2D_from_df(df = DF_CKPT)
colnames(DF_CKPT)
A_CKPT<- array_2D_from_df(df = CKPT_LM)
folder.with.landmarks <- ckpt2r_examples()
folder.with.landmarks
LM_list <- read_checkpoint(folder.with.landmarks)
LM_list
CKPT_LM
CKPT_LM<-read_checkpoint("../data_Simon_Sommerfeld/reco_tifs_LMs/CKPT/")
CKPT_LM
A_CKPT<-array_2D_from_df(CKPT_LM)
rlang::last_error()
LM_list
array_2D<-array_2D_from_df(LM_list)
remove.packages("ckpt2r")
library(ckpt2r)
folder.with.landmarks <- ckpt2r_examples()
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
library(ckpt2r)
folder.with.landmarks <- ckpt2r_examples()
devtools::install_github('https://github.com/Peter-T-Ruehr/ckpt2r')
getwd()
setwd("C:/Users/sginot/Desktop/")
library(ckpt2r)
landmarks_df("example/", recursive = F, pattern = NULL)
landmarks_df<- read_checkpoint("example/", recursive = F, pattern = NULL)
landmarks_df
print(landmarks_df, n=42
=
print(landmarks_df, n=42)
LMDF <- landmarks_df[landmarks_df$defined == "N",]
LMDF
print(LMDF, n=50
)
array_2D <- array_2D_from_df(df,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
array_2D <- array_2D_from_df(landmarks_df,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
array_2D <- array_2D_from_df(LMDF,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
array_2D
array_2D <- array_2D[, - which(colSums(is.na(array_2D)) > 0)]
array_2D
folder.with.landmarks <- ckpt2r_examples()
landmarks_df <- read_checkpoint(folder.with.landmarks,
recursive = FALSE,
pattern = NULL)
landmarks_df <- landmarks_df[landmarks_df$defined != "M",]
array_2D <- array_2D_from_df(landmarks_df,
LM_column = "LM",
specimen_column = "file_name",
X_column = "X",
Y_column = "Y",
Z_column = "Z")
landmarks_df
print(landmarks_df, n=350
)
