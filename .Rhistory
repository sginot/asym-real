title(main = "C. Landmarks congruence matrix",
line = 5, cex.main = 1.5)
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 1,
cex.axis = 1.5)
axis(side = 2,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 3,
cex.axis = 1.5)
axis(side = 4,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2,
cex.axis = 1.2)
axis(side = 3,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2,
cex.axis = 1.2)
legend(x = 40,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15,
cex = 1.2)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3, cex = 1.5)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1, cex = 1.5)
dev.off()
# Define color scale
color <- hcl.colors(30,
palette = "viridis",
alpha = NULL,
rev = FALSE,
fixup = TRUE)
# Covariance matrix, with individual coordinates as variables
pdf(file = paste(output_folder,
"covariance_heatmap.pdf",
sep = "/"),
height = 8,
width = 8)
image(x = 1:dim(cov_overall)[1],
y = 1:dim(cov_overall)[1],
z = cov_overall,
col = color,
main = "Landmarks covariance matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(h = c(51.5, 78.5),
v = c(51.5, 78.5),
col = "grey",
lwd = 3)
dev.off()
pdf(file = paste(output_folder,
"covariance_lowertri_heatmap.pdf",
sep = "/"),
height = 8,
width = 8)
image(x = 1:dim(mcov)[1],
y = 1:dim(mcov)[1],
z = mcov,
col = color,
main = "Landmarks covariance matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(h = c(24.5, 51.5, 78.5),
v = c(24.5, 51.5, 78.5),
col = "grey",
lwd = 3)
text(x = c(rep(12.5, 4),
rep(37.5, 3),
rep(63.5, 2), 91.5),
y = c(12.5, 37.5, 63.5, 91.5,
37.5, 63.5, 91.5,
63.5, 91.5,
91.5),
labels = paste(na.omit(c(round(av_cov * 10^6, 2))),
"*10^-6"),
pos = 3,
srt = 45)
axis(side = 1,
at =  c(12.5, 37.5, 63.5, 91.5),
labels = parts,
font = 2,
las = 1)
axis(side = 2,
at =  c(12.5, 37.5, 63.5, 91.5),
labels = parts,
font = 2, las = 3)
dev.off()
# Correlation matrix, with individual coordinates as variables
pdf(file = paste(output_folder,
"correlation_heatmap.pdf",
sep = "/"),
height = 8,
width = 8)
image(x = 1:dim(cor_overall)[1],
y = 1:dim(cor_overall)[1],
z = cor_overall,
col = color,
main = "Landmarks correlation matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(h = c(51.5, 78.5),
v = c(51.5, 78.5),
col = "grey",
lwd = 3)
dev.off()
pdf(file = paste(output_folder,
"correlation_nodiag_heatmap.pdf",
sep = "/"),
height = 8,
width = 8)
image(x = 1:dim(mcor)[1],
y = 1:dim(mcor)[1],
z = mcor,
col = color,
main = "Landmarks correlation matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(h = c(51.5, 78.5),
v = c(51.5, 78.5),
col = "grey",
lwd = 3)
dev.off()
# Congruence matrix, with landmarks congruence coefficients as variables
pdf(file = paste(output_folder,
"congruence_heatmap.pdf",
sep = "/"),
height = 8,
width = 8)
image(x = 1:dim(congru_overall)[1],
y = 1:dim(congru_overall)[1],
z = congru_overall,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = c(17.5, 26.5),
h = c(17.5, 26.5),
lwd = 3,
col = "grey")
label_head <- DF[-c(LM_LM, LM_RM), 10]
label_LM <- DF[LM_LM, 10]
label_RM <- DF[LM_RM, 10]
lab_congru <- c(label_head, label_LM, label_RM)
axis(side = 1,
at = 1:dim(congru_overall)[2],
labels = lab_congru,
las = 2)
axis(side = 2,
at = 1:dim(congru_overall)[2],
labels = lab_congru,
las = 2)
dev.off()
# Congruence matrix plot with reordered LMs, and integration test results
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[order(modu_head[,1])] # Order head LMs names by
# the module they belong to
pdf(file = paste(output_folder,
"LM_correlation_module_congruence.pdf",
sep = "/"),
height = 8,
width = 11)
par(mar = c(4, 8, 6, 4))
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
title(main = "Landmarks congruence matrix",
line = 5)
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 1)
axis(side = 2,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2, las = 3)
axis(side = 4,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 3,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
legend(x = -5,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1)
dev.off()
# Possible artifact from alignment of left and right mandibles. May artificially
# increase correlation between homologous landmarks
# Global figure with landmark template and matrices heatmaps
#-------------------------------------------------------------------------------
pdf(file = paste(output_folder,
"Landmark_template_and_covariation.pdf",
sep = "/"),
width = 16,
height = 16)
layout(matrix(1:4, ncol = 2,
byrow = T),
widths = c(0.45, 0.55))
par(mar = c(1,1,1,1))
plot(x = arr[,2,1],
y = arr[,3,1],
asp = 1,
pch = 21,
cex = 3,
bg = DF[,6],
main = "A. Landmarks and modules",
axes = F,
xlab = "",
ylab = "",
cex.main = 1.5)
text(x = arr[,2,1],
y = arr[,3,1],
labels = DF[,10],
col = DF[,6],
offset = 1,
cex = 1.3,
font = 2,
pos = c(rep(1,3), 4, rep(1,6), 2,
rep(1,7), 2, 3, 1, 4, 3, 2,
4, 3, 4, 3, 1, 3, 2, 3, 1))
plot(1,1,
type = "n",
bty = "n",
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
legend("topleft",
legend = paste(DF$abbrev[order(DF[,6])],
DF$name[order(DF[,6])],
sep = " - "),
text.col = DF[order(DF[,6]), 6],
bty = "n",
cex = 1.3)
par(mar = c(2.5, 3, 6, 1))
image(x = 1:dim(mcov)[1],
y = 1:dim(mcov)[1],
z = mcov,
col = color,
main = "B. Coordinate covariance matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n",
cex.main = 1.5)
abline(h = c(24.5, 51.5, 78.5),
v = c(24.5, 51.5, 78.5),
col = "grey",
lwd = 3)
text(x = c(rep(12.5, 4),
rep(37.5, 3),
rep(63.5, 2), 91.5),
y = c(12.5, 37.5, 63.5, 91.5,
37.5, 63.5, 91.5,
63.5, 91.5,
91.5),
labels = paste(na.omit(c(round(av_cov * 10^6, 2))),
"*10^-6"),
pos = 3,
srt = 45,
cex = 1.5)
axis(side = 1,
at =  c(12.5, 37.5, 63.5, 91.5),
labels = parts,
font = 2,
las = 1,
cex.axis = 1.5)
axis(side = 2,
at =  c(12.5, 37.5, 63.5, 91.5),
labels = parts,
font = 2,
las = 3,
cex.axis = 1.5)
par(mar = c(2.5, 2, 6, 11))
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
title(main = "C. Landmarks congruence matrix",
line = 5, cex.main = 1.5)
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 1,
cex.axis = 1.5)
axis(side = 2,
at =  c(4.5, 13, 22, 31),
labels = parts,
font = 2,
las = 3,
cex.axis = 1.5)
axis(side = 4,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2,
cex.axis = 1.2)
axis(side = 3,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2,
cex.axis = 1.2)
legend(x = 40,
y = 35.5,
xpd = T,
legend = round(seq(min(na.omit(c(m))),
max(na.omit(c(m))),
length = length(color)), 2),
col = color,
pch = 15,
cex = 1.2)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3, cex = 1.5)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1, cex = 1.5)
dev.off()
#
tbpls_asym_head_mand <- two.b.pls(bilatsym_head$asymm.shape,
bilatsym_mand$asymm.shape)
# Gather both mandi and head asym component shapes in an array
A_asym <- array(NA,
dim = c(dim(bilatsym_head$asymm.shape)[1] +
dim(bilatsym_mand$asymm.shape)[1],
dim(bilatsym_head$asymm.shape)[2:3]))
for (i in 1:dim(A_asym)[3]) {
A_asym[1:17,,i] <- bilatsym_head$asymm.shape[,,i]
A_asym[18:26,,i] <- bilatsym_mand$asymm.shape[,,i]
}
# Compute congruence matrix
congru_asym <- abs(dotcorr(A_asym))
# Plot resulting heatmap
image(x = 1:dim(congru_asym)[1],
y = 1:dim(congru_asym)[1],
z = congru_asym,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = 17.5,
h = 17.5,
lwd = 3,
col = "grey")
tbpls_sym_head_mand <- two.b.pls(bilatsym_head$symm.shape,
bilatsym_mand$symm.shape)
A_sym <- array(NA,
dim = c(dim(bilatsym_head$symm.shape)[1] +
dim(bilatsym_mand$symm.shape)[1],
dim(bilatsym_head$symm.shape)[2:3]))
for (i in 1:dim(A_sym)[3]) {
A_sym[1:17,,i] <- bilatsym_head$symm.shape[,,i]
A_sym[18:26,,i] <- bilatsym_mand$symm.shape[,,i]
}
congru_sym <- abs(dotcorr(A_sym))
image(x = 1:dim(congru_sym)[1],
y = 1:dim(congru_sym)[1],
z = congru_sym,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = 17.5,
h = 17.5,
lwd = 3,
col = "grey")
modo_overall
mcov
diag(mcov)
diag(mcor)
bf_sym_head_pls
bf_asym_head_pls
bf_sym_mand_pls
bf_asym_mand_pls
part_overall2
NA_BF <- which(is.na(bf2))
bf_L_mand_pls <- two.b.pls(A1 = A_overall[which(part_overall2 == "LM"),,-NA_BF],
A2 = bf2[-NA_BF])
bf_L_mand_pls
bf_R_mand_pls <- two.b.pls(A1 = A_overall[which(part_overall2 == "RM"),,-NA_BF],
A2 = bf2[-NA_BF])
bf_R_mand_pls
bf_head_pls <- two.b.pls(A1 = A_overall[which(part_overall == "head"),,-NA_BF],
A2 = bf2[-NA_BF])
bf_head_pls
bf_sym_head_pls <- two.b.pls(A1 = bilatsym_head$symm.shape[,,-NA_BF],
A2 = bf2[-NA_BF])
bf_asym_head_pls <- two.b.pls(A1 = bilatsym_head$asymm.shape[,,-NA_BF],
A2 = bf2[-NA_BF])
bf_sym_mand_pls <- two.b.pls(A1 = bilatsym_mand$symm.shape[,,-NA_BF],
A2 = bf2[-NA_BF])
bf_asym_mand_pls <- two.b.pls(A1 = bilatsym_mand$asymm.shape[,,-NA_BF],
A2 = bf2[-NA_BF])
bf_L_mand_pls
cor.test(bf2, TA_size_mand)
bf_L_mand_pls
bf_L_mand_pls$r.pls
bf_R_mand_pls$r.pls
bf_head_pls$r.pls
bf_sym_head_pls$r.pls
bf_sym_mand_pls$r.pls
bf_asym_mand_pls$r.pls
bf_asym_head_pls$r.pls
?two.b.pls
data(plethShapeFood)
Y.gpa<-gpagen(plethShapeFood$land)    #GPA-alignment
#2B-PLS between head shape and food use data
PLS <-two.b.pls(Y.gpa$coords,plethShapeFood$food,iter=999)
summary(PLS)
bf_L_mand_pls$P.value
bf_R_mand_pls$P-value
bf_R_mand_pls$P.value
bf_head_pls$P.value
bf_sym_head_pls$P.value
bf_sym_mand_pls$P.value
bf_asym_mand_pls$P.value
bf_asym_head_pls$P.value
cor.test(bf2, FA_head)
cor.test(bf2, FA_mand)
cor.test(bf2, FA_head)
cor.test(bf2, FA_mand)
cor.test(bf2, DA_head)
cor.test(bf2, DA_mand)
cor.test(bf2, TA_head)
cor.test(bf2, TA_mand)
cor.test(bf2, TA_size_mand)
cor.test(bf2, FA_head)
cor.test(bf2, FA_mand)
cor.test(bf2, DA_head)
cor.test(bf2, DA_mand)
cor.test(bf2, TA_head)
cor.test(bf2, TA_mand)
cor.test(bf2, TA_size_mand)
?cor.test
CVTA_mand
CVTA_head
CVTA_siz_mand
CVDA_mand
CVDA_head
CVBF2
CVHL
CVsiz
CVFA_mand
CVFA_head
