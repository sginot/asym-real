source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
?plot3d
?options
#-------------------------------------------------------------------------------
# Global asymmetry decomposition
options(rgl.printRglwidget = TRUE)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
#-------------------------------------------------------------------------------
# Global asymmetry decomposition
options(rgl.printRglwidget = TRUE)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM <- rglwidget(locate.reorder(shape = pA$mshape,
along = 2))
source("../asym_simulation/001_functions.R")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
source("../asym_simulation/001_functions.R")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
source("../asym_simulation/001_functions.R")
source("../asym_simulation/002_asym_components.R")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
rglwidget()
# Required packages:
source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
options(rgl.printRglwidget = T)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
interactive()
help("rgl")
open3d()
# Required packages:
source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
install.packages("rgl")
install.packages("rgl")
library(car)
library(rgl)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
pA
pA$mshape
plot3d(pA$mshape)
?plot3d
source("../asym_simulation/001_functions.R")
source("../asym_simulation/002_asym_components.R")
source("Rfunctions1.txt")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
# Required packages:
library(abind)
library(scales)
source("../asym_simulation/001_functions.R")
source("../asym_simulation/002_asym_components.R")
source("Rfunctions1.txt")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM
decomp_asym <- mv.asym(A = pA$rotated,
reorder.LM = reord_LM,
Nrep = 1,
along = 2,
indiv.fac = ID)
plot(decomp_asym$PCA.sym$x[,1:2],
asp = 1)
plot(decomp_asym$PCA.asym$x[,1:2],
asp = 1,
xlim = c(-max(abs(decomp_asym$PCA.asym$x[, 1])),
0),
ylim = c(-max(abs(decomp_asym$PCA.asym$x[, 2])),
max(abs(decomp_asym$PCA.asym$x[, 2]))))
abline(h = 0,
v = 0,
col = "gray")
DA <- decomp_asym$M[, 3]
FA <- decomp_asym$M[, 1]
Da
DA
FA
cor.test(csiz.av, FA)
cor.test(bf2, FA)
cor.test(csiz.av, DA)
cor.test(bf2, DA)
linear_mod <- lm(bf2 ~ DA)
DA_sq <- DA^2
quadratic_mod <- lm(bf2 ~ DA + DA_sq)
summary(quadratic_mod)
newvals <- seq(-0.2,
0,
by = 0.001)
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA = newvals,
DA_sq = newvals^2))
plot(DA, bf2)
lines(newvals, pred_quadra[,1])
pred_quadra
pred_quadra <- predict(quadratic_mod, newdata = data.frame(DA = newvals,
DA_sq = newvals^2))
plot(DA, bf2)
lines(newvals, pred_quadra)
shpmirshp <- decomp_asym$Procrustes$rotated
plot(shpmirshp[,1,],
shpmirshp[,2,],
asp = 1)
plot(shpmirshp[,2,],
shpmirshp[,3,],
asp = 1)
distall <- decomp_asym$Procrustes$intereucl.dist
mat_dist <- as.matrix(distall)
TA <- rep(NA,
dim(mat_dist)[1]/4) # 2 shapes * 2 mirrored shapes
for (i in 1:length(TA)) {
TA[i] <- mean(c(mat_dist[i*2-1,
i*2-1 + dim(mat_dist)[1]/2],
mat_dist[i*2,
i*2 + dim(mat_dist)[1]/2]))
}
linear_mod2 <- lm(bf2 ~ TA)
summary(linear_mod2)
TA_sq <- TA^2
quadratic_mod2 <- lm(bf2 ~ TA + TA_sq)
summary(quadratic_mod2)
newvals2 <- seq(0,
0.2,
by = 0.001)
pred_quadra2 <- predict(quadratic_mod2, newdata = data.frame(TA = newvals2,
TA_sq = newvals2^2))
plot(TA, bf2)
lines(newvals2, pred_quadra2)
linear_mod5 <- lm(bf2 ~ FA)
summary(linear_mod5)
FA_sq <- FA^2
quadratic_mod5 <- lm(bf2 ~ FA + FA_sq)
summary(quadratic_mod5)
newvals5 <- seq(-0.2,
0.2,
by = 0.001)
pred_quadra5 <- predict(quadratic_mod5, newdata = data.frame(FA = newvals5,
FA_sq = newvals5^2))
plot(FA, bf2)
lines(newvals5, pred_quadra5)
asym_mandi <- mv.asym(A = pA$rotated[16:33,,],
reorder.LM = reord_LM[16:33]-15,
Nrep = 1,
along = 2,
indiv.fac = ID)
plot(asym_mandi$Procrustes$rotated[,2,],
asym_mandi$Procrustes$rotated[,3,],
asp = 1)
plot(asym_mandi$PCA.sym$x[, 1:2])
plot(asym_mandi$PCA.asym$x[, 1:2])
DA_mandi <- asym_mandi$M[, 3]
FA_mandi <- asym_mandi$M[, 1]
linear_mod3 <- lm(bf2 ~ DA_mandi)
summary(linear_mod3)
DA_mandi_sq <- DA_mandi^2
quadratic_mod3 <- lm(bf2 ~ DA_mandi + DA_mandi_sq)
summary(quadratic_mod3)
newvals3 <- seq(-0.3,
0.2,
by = 0.001)
pred_quadra3 <- predict(quadratic_mod3,
newdata = data.frame(DA_mandi = newvals3,
DA_mandi_sq = newvals3^2))
plot(DA_mandi, bf2)
lines(newvals3, pred_quadra3)
asym_head <- mv.asym(A = pA$rotated[-c(16:33),,],
reorder.LM = c(reord_LM[1:15], reord_LM[34:35]-18),
Nrep = 1,
along = 2,
indiv.fac = ID)
plot(asym_head$Procrustes$rotated[,2,],
asym_head$Procrustes$rotated[,3,],
asp = 1)
plot(asym_head$PCA.sym$x[, 1:2])
plot(asym_head$PCA.asym$x[, 1:2])
DA_head <- asym_head$M[, 3]
FA_head <- asym_head$M[, 1]
linear_mod4 <- lm(bf2 ~ DA_head)
summary(linear_mod4)
DA_head_sq <- DA_head^2
quadratic_mod4 <- lm(bf2 ~ DA_head + DA_head_sq)
summary(quadratic_mod4)
newvals <- seq(-0.2,
0.2,
by = 0.001)
pred_quadra4 <- predict(quadratic_mod4, newdata = data.frame(DA_head = newvals,
DA_head_sq = newvals^2))
plot(DA_head, bf2)
lines(newvals, pred_quadra4)
abline(linear_mod4)
summary(lm(bf2 ~ FA_head))
CVTA <- sd(TA, na.rm = T)/mean(TA, na.rm = T)
CVDA <- sd(DA, na.rm = T)/mean(abs(DA), na.rm = T)
CVBF <- sd(bf, na.rm = T)/mean(bf, na.rm = T)
CVBF2 <- sd(bf2, na.rm = T)/mean(bf2, na.rm = T)
CVHL <- sd(head_l, na.rm = T)/mean(head_l, na.rm = T)
CVsiz <- sd(csiz, na.rm = T)/mean(csiz, na.rm = T)
#-------------------------------------------------------------------------------
# Geomorph bilat.symmetry function
land_pairs <- list()
land_pairs[[1]] <- c(3, 12)
land_pairs[[2]] <- c(4, 11)
land_pairs[[3]] <- c(5, 9)
land_pairs[[4]] <- c(6, 8)
land_pairs[[5]] <- c(7, 10)
land_pairs[[6]] <- c(3, 12)
land_pairs[[7]] <- c(14, 15)
land_pairs[[8]] <- c(16, 17)
land_pairs[[9]] <- c(18, 21)
land_pairs[[10]] <- c(19, 22)
land_pairs[[11]] <- c(20, 23)
land_pairs[[12]] <- c(24, 25)
land_pairs[[13]] <- c(26, 30)
land_pairs[[14]] <- c(27, 31)
land_pairs[[15]] <- c(28, 32)
land_pairs[[16]] <- c(29, 33)
land_pairs[[17]] <- c(34, 35)
land_pairs <- matrix(unlist(land_pairs),
ncol = 2,
byrow = T)
bilat_sym <- bilat.symmetry(A = shapes,
ind = ID,
replicate = replic,
object.sym = T,
land.pairs = land_pairs)
# Required packages:
library(geomorph)
bilat_sym <- bilat.symmetry(A = shapes,
ind = ID,
replicate = replic,
object.sym = T,
land.pairs = land_pairs)
summary(manova(lm(prcomp(asym_head$matshp)$x[,1:50] ~
asym_head$indiv.fac.mirror * asym_head$mirror.fac)))
summary(manova(lm(prcomp(asym_mandi$matshp)$x[,1:50] ~
asym_mandi$indiv.fac.mirror * asym_mandi$mirror.fac)))
summary(manova(lm(prcomp(decomp_asym$matshp)$x[,1:50] ~
decomp_asym$indiv.fac.mirror * decomp_asym$mirror.fac)))
summary(aov(lm(decomp_asym$matshp ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
# Make visual representation
mshp_real <- pA$mshape
mshp <- decomp_asym$Procrustes$mshape
LM_sdev <- matrix(apply(X = mat_shps,
MARGIN = 2,
FUN = sd),
ncol = 3,
byrow = T)
bilat_sym
smx <- summary(aov(lm(decomp_asym$matshp[, i] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smy <- summary(aov(lm(decomp_asym$matshp[, i+35] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smz <- summary(aov(lm(decomp_asym$matshp[, i+70] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
plot(decomp_asym$Procrustes$mshape[,3],
decomp_asym$Procrustes$mshape[,1],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("blue",
alpha =  MSz / max(MSz) / 2),
#Divided by 2 because of overlapping landmarks (left right)
lwd = 2,
xlab = "",
ylab = "",
axes = F)
decomp_asym$matshp
smz <- summary(aov(lm(decomp_asym$matshp[, i+70] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
asym_mandi$indiv.fac.mirror
for (i in 1:35) {
smx <- summary(aov(lm(decomp_asym$matshp[, i] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smy <- summary(aov(lm(decomp_asym$matshp[, i+35] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smz <- summary(aov(lm(decomp_asym$matshp[, i+70] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
if (smx[[1]]$`Pr(>F)`[1] < 0.05) {
MSx[i] <- smx[[1]]$`Mean Sq`[1]
} else {MSx[i] <- 0}
if (smy[[1]]$`Pr(>F)`[1] < 0.05) {
MSy[i] <- smy[[1]]$`Mean Sq`[1]
} else {MSy[i] <- 0}
if (smz[[1]]$`Pr(>F)`[1] < 0.05) {
MSz[i] <- smz[[1]]$`Mean Sq`[1]
} else {MSz[i] <- 0}
}
plot(decomp_asym$Procrustes$mshape[,1],
decomp_asym$Procrustes$mshape[,2],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("firebrick",
alpha =  MSx / max(MSx)),
lwd = 2,
xlab = "",
ylab = "",
axes = F)
MSw
MSx
MSy
MSx <- MSy <- MSz <- rep(NA, 35)
for (i in 1:35) {
smx <- summary(aov(lm(decomp_asym$matshp[, i] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smy <- summary(aov(lm(decomp_asym$matshp[, i+35] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smz <- summary(aov(lm(decomp_asym$matshp[, i+70] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
if (smx[[1]]$`Pr(>F)`[1] < 0.05) {
MSx[i] <- smx[[1]]$`Mean Sq`[1]
} else {MSx[i] <- 0}
if (smy[[1]]$`Pr(>F)`[1] < 0.05) {
MSy[i] <- smy[[1]]$`Mean Sq`[1]
} else {MSy[i] <- 0}
if (smz[[1]]$`Pr(>F)`[1] < 0.05) {
MSz[i] <- smz[[1]]$`Mean Sq`[1]
} else {MSz[i] <- 0}
}
plot(decomp_asym$Procrustes$mshape[,1],
decomp_asym$Procrustes$mshape[,2],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("firebrick",
alpha =  MSx / max(MSx)),
lwd = 2,
xlab = "",
ylab = "",
axes = F)
plot(decomp_asym$Procrustes$mshape[,2],
decomp_asym$Procrustes$mshape[,3],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("forestgreen",
alpha =  MSy / max(MSy)),
lwd = 2,
ylab = "",
xlab = "",
axes = F)
plot(decomp_asym$Procrustes$mshape[,3],
decomp_asym$Procrustes$mshape[,1],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("blue",
alpha =  MSz / max(MSz) / 2),
#Divided by 2 because of overlapping landmarks (left right)
lwd = 2,
xlab = "",
ylab = "",
axes = F)
MSx <- MSy <- MSz <- rep(NA, 35)
for (i in 1:35) {
smx <- summary(aov(lm(decomp_asym$matshp[, i] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smy <- summary(aov(lm(decomp_asym$matshp[, i+35] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smz <- summary(aov(lm(decomp_asym$matshp[, i+70] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
if (smx[[1]]$`Pr(>F)`[2] < 0.05) {
MSx[i] <- smx[[1]]$`Mean Sq`[2]
} else {MSx[i] <- 0}
if (smy[[1]]$`Pr(>F)`[2] < 0.05) {
MSy[i] <- smy[[1]]$`Mean Sq`[2]
} else {MSy[i] <- 0}
if (smz[[1]]$`Pr(>F)`[2] < 0.05) {
MSz[i] <- smz[[1]]$`Mean Sq`[2]
} else {MSz[i] <- 0}
}
plot(decomp_asym$Procrustes$mshape[,1],
decomp_asym$Procrustes$mshape[,2],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("firebrick",
alpha =  MSx / max(MSx)),
lwd = 2,
xlab = "",
ylab = "",
axes = F)
plot(decomp_asym$Procrustes$mshape[,2],
decomp_asym$Procrustes$mshape[,3],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("forestgreen",
alpha =  MSy / max(MSy)),
lwd = 2,
ylab = "",
xlab = "",
axes = F)
plot(decomp_asym$Procrustes$mshape[,3],
decomp_asym$Procrustes$mshape[,1],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("blue",
alpha =  MSz / max(MSz) / 2),
lwd = 2,
xlab = "",
ylab = "",
axes = F)
MSx <- MSy <- MSz <- rep(NA, 35)
for (i in 1:35) {
smx <- summary(aov(lm(decomp_asym$matshp[, i] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smy <- summary(aov(lm(decomp_asym$matshp[, i+35] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
smz <- summary(aov(lm(decomp_asym$matshp[, i+70] ~
asym_mandi$indiv.fac.mirror * asym_head$mirror.fac)))
if (smx[[1]]$`Pr(>F)`[3] < 0.05) {
MSx[i] <- smx[[1]]$`Mean Sq`[3]
} else {MSx[i] <- 0}
if (smy[[1]]$`Pr(>F)`[3] < 0.05) {
MSy[i] <- smy[[1]]$`Mean Sq`[3]
} else {MSy[i] <- 0}
if (smz[[1]]$`Pr(>F)`[3] < 0.05) {
MSz[i] <- smz[[1]]$`Mean Sq`[3]
} else {MSz[i] <- 0}
}
plot(decomp_asym$Procrustes$mshape[,1],
decomp_asym$Procrustes$mshape[,2],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("firebrick",
alpha =  MSx / max(MSx)),
lwd = 2,
xlab = "",
ylab = "",
axes = F)
plot(decomp_asym$Procrustes$mshape[,2],
decomp_asym$Procrustes$mshape[,3],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("forestgreen",
alpha =  MSy / max(MSy)),
lwd = 2,
ylab = "",
xlab = "",
axes = F)
plot(decomp_asym$Procrustes$mshape[,3],
decomp_asym$Procrustes$mshape[,1],
asp = 1,
pch = 21,
cex = 2,
bg = alpha("blue",
alpha =  MSz / max(MSz) / 2),
lwd = 2,
xlab = "",
ylab = "",
axes = F)
mtext("Ventral <=> Dorsal",
side = 1,
col = "blue",
line = 3,
font = 2)
l
#-------------------------------------------------------------------------------
# Make lollipop plot for FA and DA components
palette(c("bisque", "firebrick", "navyblue", "forestgreen"))
cols <- head_mand[-c(8:10)]
input_folder <- "Figures/"
plot(bilat_sym$DA.component[,2,2],
bilat_sym$DA.component[,1,2],
asp = 1,
axes = F,
xlab = "",
ylab = "",
pch = 21,
bg = cols,
cex = 2,
main = "<= Right-Left =>")
for (i in 1:dim(mshp)[1]) {
lines(x = c(bilat_sym$DA.component[i, 2, 1], bilat_sym$DA.component[i, 2, 2]),
y = c(bilat_sym$DA.component[i, 1, 1], bilat_sym$DA.component[i, 1, 2]),
col = "black",
lwd = 3)
}
bilat_sym
?bilat.symmetry
bilat_sym_typeII <- bilat.symmetry(A = shapes,
ind = ID,
replicate = replic,
object.sym = T,
land.pairs = land_pairs,
SS.type = "II")
bilat_sym_typeII
bilat_sym_NORRPP <- bilat.symmetry(A = shapes,
ind = ID,
replicate = replic,
object.sym = T,
land.pairs = land_pairs,
RRPP = F)
bilat_sym_NORRPP
summary(manova(lm(prcomp(asym_head$matshp)$x[,1:50] ~
asym_head$indiv.fac.mirror * asym_head$mirror.fac)))
