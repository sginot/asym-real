label_RM <- DF[LM_RM, 10]
label_RM
lab_congru <- c(label_head, label_LM, label_RM)
label_head <- DF[-c(LM_LM, LM_RM), 10]
label_LM <- DF[LM_LM, 10]
label_RM <- DF[LM_RM, 10]
lab_congru <- c(label_head, label_LM, label_RM)
axis(side = 1,
at = 1:dim(congru_overall)[2],
labels = lab_congru,
las = 2)
axis(side = 2,
at = 1:dim(congru_overall)[2],
labels = lab_congru,
las = 2)
dim(bilatsym_mand$asymm.shape)
dim(bilatsym_head$asymm.shape)
A_asym <- array(NA,
dim = c(dim(bilatsym_head$asymm.shape)[1] +
dim(bilatsym_mand$asymm.shape)[1],
dim(bilatsym_head$asymm.shape)[2:3]))
for (i in 1:dim(A_asym)[3]) {
A_asym[1:17,,i] <- bilatsym_head$asymm.shape[,,i]
A_asym[18:26,,i] <- bilatsym_meand$asymm.shape[,,i]
}
A_asym <- array(NA,
dim = c(dim(bilatsym_head$asymm.shape)[1] +
dim(bilatsym_mand$asymm.shape)[1],
dim(bilatsym_head$asymm.shape)[2:3]))
for (i in 1:dim(A_asym)[3]) {
A_asym[1:17,,i] <- bilatsym_head$asymm.shape[,,i]
A_asym[18:26,,i] <- bilatsym_mean$asymm.shape[,,i]
}
for (i in 1:dim(A_asym)[3]) {
A_asym[1:17,,i] <- bilatsym_head$asymm.shape[,,i]
A_asym[18:26,,i] <- bilatsym_mand$asymm.shape[,,i]
}
plot(A_asym[,,1])
plot(A_asym[,2:3,1], asp = 1)
plot(A_asym[,1:2,1], asp = 1)
congru_asym <- abs(dotcorr(A_asym))
image(x = 1:dim(congru_asym)[1],
y = 1:dim(congru_asym)[1],
z = congru_asym,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = 17.5,
h = 17.5,
lwd = 3,
col = "grey")
A_sym <- array(NA,
dim = c(dim(bilatsym_head$symm.shape)[1] +
dim(bilatsym_mand$symm.shape)[1],
dim(bilatsym_head$symm.shape)[2:3]))
for (i in 1:dim(A_sym)[3]) {
A_sym[1:17,,i] <- bilatsym_head$symm.shape[,,i]
A_sym[18:26,,i] <- bilatsym_mand$symm.shape[,,i]
}
congru_sym <- abs(dotcorr(A_sym))
image(x = 1:dim(congru_sym)[1],
y = 1:dim(congru_sym)[1],
z = congru_sym,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = 17.5,
h = 17.5,
lwd = 3,
col = "grey")
image(x = 1:dim(cov_overall)[1],
y = 1:dim(cov_overall)[1],
z = cov_overall,
col = color,
main = "Landmarks covariance matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(h = c(51.5, 78.5),
v = c(51.5, 78.5),
col = "grey",
lwd = 3)
tbpls
?modularity.test
library(car)
library(rgl)
library(geomorph)
bf
bf2
bf_asym_pls <- two.b.pls(A1 = bilatsym_mand$asymm.shape[,,-which(is.na(bf2))], A2 = bf2[-which(is.na(bf2))])
bf_asym_pls
summary(bf_asym_pls)
plot(bf_asym_pls)
bf_sym_pls <- two.b.pls(A1 = bilatsym_mand$symm.shape[,,-which(is.na(bf2))], A2 = bf2[-which(is.na(bf2))])
bf_sym_pls
bf_asym_pls <- two.b.pls(A1 = bilatsym_head$asymm.shape[,,-which(is.na(bf2))], A2 = bf2[-which(is.na(bf2))])
bf_asym_pls
bf_sym_pls <- two.b.pls(A1 = bilatsym_head$symm.shape[,,-which(is.na(bf2))], A2 = bf2[-which(is.na(bf2))])
bf_sym_head_pls <- two.b.pls(A1 = bilatsym_head$symm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
bf_asym_head_pls <- two.b.pls(A1 = bilatsym_head$asymm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
bf_sym_mand_pls <- two.b.pls(A1 = bilatsym_mand$symm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
bf_asym_mand_pls <- two.b.pls(A1 = bilatsym_mand$asymm.shape[,,-which(is.na(bf2))],
A2 = bf2[-which(is.na(bf2))])
bf_asym_mand_pls
DF[,5]
DF[,6]
DF[,c(6,10]
DF[,c(6,10)]
DF[which(DF[,6] == 1 | DF[,6] ==  4),c(6,10)]
modu_head <- DF[which(DF[,6] == 1 | DF[,6] ==  4),
c(6, 10)]
label_head
match(label_head, modu_head$abbrev
)
match(label_head, modu_head$abbrev)
modularity.test(A = shp_head,
partition.gp = modu_head,
iter = 1000,
CI = T)
dim(shp_head)
modularity.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 1000,
CI = T)
mod_test_head <- modularity.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 1000,
CI = T)
mod_test_head
modu_head
order(modu_head[,1])
modu_head[order(modu_head[,1]),]
modo_head <- modu_head[order(modu_head[,1]),]
congro_overall <- congru_overall
congro_overall[1:17, 1:17] <- congro_overall[order(modu_head[,1]),
order(modu_head[,1])]
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[1:17]
image(x = 1:dim(congro_overall)[1],
y = 1:dim(congro_overall)[1],
z = congro_overall,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
congro_overall <- congru_overall
congro_overall[1:17, 1:17] <- congro_overall[order(modu_head[,1]),
order(modu_head[,1])]
image(x = 1:dim(congro_overall)[1],
y = 1:dim(congro_overall)[1],
z = congro_overall,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
order(modu_head[,1])
image(x = 1:dim(congro_overall)[1],
y = 1:dim(congro_overall)[1],
z = congru_overall,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
image(x = 1:dim(congro_overall)[1],
y = 1:dim(congro_overall)[1],
z = congro_overall,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
modo_head
abline(v = c(8.5, 17.5, 26.5),
h = c(17.5, 26.5),
lwd = 3,
col = "grey")
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[1:17]
axis(side = 1,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 2,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
modu_head
image(x = 1:dim(congro_overall)[1],
y = 1:dim(congro_overall)[1],
z = congro_overall,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[order(modu_head[,1])]
axis(side = 1,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 2,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
?integration.test
integ_test_head <- integration.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999,
CI = T)
integ_test_head <- integration.test(A = shp_head,
partition.gp = modu_head[,1],
iter = 999)
integ_test_head
dim(A_overall)
mat_overall
A_overall[,,1]
plot(A_overall[,2:3,1])
plot(A_overall[,2:3,1], asp= 1)
part_overall <- as.factor(c(rep("head", 17),
rep("LM", 9),
rep("RM", 9)))
part_overall
modo_head
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
part_overall2
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
part_overall2[which(part_overall2 == 1)] <- "head"
part_overall2[which(part_overall2 == 4)] <- "sensory"
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
part_overall2
integ_test_3mod <- integration.test(A = A_overall,
partition.gp = part_overall,
iter = 999)
integ_test_4mod <- integration.test(A = A_overall,
partition.gp = part_overall2,
iter = 999)
integ_test_3mod
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
integ_test_4mod <- integration.test(A = A_overall,
partition.gp = part_overall2,
iter = 999)
integ_test_4mod
levels(part_overall2)
levels(part_overall2)[1] <- "head"
part_overall2
levels(part_overall2)[2] <- "sensory"
part_overall2
part_overall2 <- as.factor(c(modu_head[,1],
rep("LM", 9),
rep("RM", 9)))
levels(part_overall2)[1:2] <- c("head", "sensory")
integ_test_3mod <- integration.test(A = A_overall,
partition.gp = part_overall,
iter = 999)
integ_test_4mod <- integration.test(A = A_overall,
partition.gp = part_overall2,
iter = 999)
integ_test_4mod
?image
image(x = 1:dim(congro_overall)[1],
y = 1:dim(congro_overall)[1],
z = upper.tri(congro_overall),
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
upper.tri(congro_overall)
image(x = 1:dim(congro_overall)[1],
y = 1:dim(congro_overall)[1],
z = congro_overall[upper.tri(congro_overall)],
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
ongro_overall[upper.tri(congro_overall)]
congro_overall[upper.tri(congro_overall)]
congro_overall
matrix(congro_overall)
?upper.tri
?image
isSymmetric(congro_overall)
m<-congro_overall[upper.tri(congro_overall)]
m<-congro_overall
m[upper.tri(congro_overall)] <- NA
m
image(m)
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
?upper.tri
m <- congro_overall
m[upper.tri(congro_overall, diag = T)] <- NA
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[order(modu_head[,1])]
axis(side = 1,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 2,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
part_overall2
levels(part_overall2)
parts <- levels(part_overall2)
text(x = c(4.5, 13, 21, 30),
y = 35,
labels = parts,
font =2)
text(x = c(4.5, 13, 21, 30),
y = 34,
labels = parts,
font =2 )
text(y = c(4.5, 13, 21, 30),
x = 1.5,
labels = parts,
font = 2,
srt = 90)
integ_test_4mod$r.pls
integ_test_4mod$r.pls.mat
t(integ_test_4mod$r.pls.mat)
c(integ_test_4mod$r.pls.mat)
p_val <- c(integ_test_4mod$pairwise.P.values)
p_val
rpls_val <- paste("R-PLS =", integ_test_4mod$r.pls.mat)
integ_test_4mod
rpls_val <- paste("r-PLS =", integ_test_4mod$r.pls.mat)
rpls_val
rpls_val <- paste("r-PLS =",
round(integ_test_4mod$r.pls.mat, 2))
rpls_val
p_val <- paste("P =", integ_test_4mod$pairwise.P.values)
p_val
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val, pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val)
modo_head <- modu_head[order(modu_head[,1]),]
lab_congro <- lab_congru
lab_congro[1:17] <- lab_congru[order(modu_head[,1])]
congro_overall <- congru_overall
congro_overall[1:17, 1:17] <- congro_overall[order(modu_head[,1]),
order(modu_head[,1])]
m <- congro_overall
m[upper.tri(congro_overall, diag = T)] <- NA
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 2,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
parts <- levels(part_overall2)
text(x = c(4.5, 13, 22, 31),
y = 34.5,
labels = parts,
font = 2)
text(y = c(4.5, 13, 22, 31),
x = 1.5,
labels = parts,
font = 2,
srt = 90)
rpls_val <- paste("r-PLS =",
round(integ_test_4mod$r.pls.mat, 3))
p_val <- paste("P =", integ_test_4mod$pairwise.P.values)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val)
image(x = 1:dim(m)[1],
y = 1:dim(m)[1],
z = m,
col = color,
main = "Landmarks congruence matrix",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n")
abline(v = c(8.5, 17.5, 26.5),
h = c(8.5, 17.5, 26.5),
lwd = 3,
col = "grey")
axis(side = 1,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
axis(side = 2,
at = 1:dim(congro_overall)[2],
labels = lab_congro,
las = 2)
text(x = c(4.5, 13, 22, 31),
y = 34.5,
labels = parts,
font = 2)
text(y = c(4.5, 13, 22, 31),
x = 1.5,
labels = parts,
font = 2,
srt = 90)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = rpls_val,
pos = 3)
text(x = c(rep(4.5, 3), rep(13, 2), 22),
y = c(13, 22, 31, 22, 31, 31),
labels = p_val,
pos = 1)
?plot3d
#-------------------------------------------------------------------------------
# Required packages
source(file = "Rfunctions1.txt") # Functions from Claude 2008
library(scales)
library(car)
library(rgl)
library(geomorph)
library(EMMLi)
library(paleomorph)
?bilat.symmetry
data(scallops)
gdf <- geomorph.data.frame(shape = scallops$coorddata, ind = scallops$ind)
scallop.sym <- bilat.symmetry(A = shape, ind = ind, object.sym = TRUE, curves= scallops$curvslide, surfaces = scallops$surfslide,
land.pairs=scallops$land.pairs, data = gdf, RRPP = TRUE, iter = 149)
summary(scallop.sym)
plot(scallop.sym, warpgrids = TRUE, mesh = NULL)
deform_av
sc <- scan("data/LM_templates/LM_left_mandi_only.tps")
sc <- scan("data/LM_templates/LM_left_mandi_only.tps", what = "character")
sc
