plot(A[,c(1,2),1], asp=1)
plot(A[,c(2,3),1], asp=1)
plot(A[,c(2,3),2], asp=1)
plot(A[,c(2,3),4], asp=1)
plot(A[,c(1,3),4], asp=1)
A[,,1]
A[,,1] == D[,1:3]
A[,,181] == D[,541:543]
A[,,180] == D[,541:543]
A[,,180]
A[,,181] == D[,541:543]
A[,,181]
dat[2,]
EMMLi(corr = macacaCorrel, N_sample = 20, mod = macacaModels)
?EMMLi
system.file("extdata", "macaca_landmarklist.csv", package = "EMMLi")
is.na(A)
which(is.na(A))
subA <- A[,, 156:180]
which(is.na(subA))
subA <- A[,, 156:180]
congruence_coef <- function(A) {
N <- dim(A)[3]
P <- dim(A)[1]
K <- dim(A)[2]
mshp <- mshape(A)
mat <- matrix(NA,
ncol = P,
nrow = P)
for (i in 1:P) {
for (j in 1:P) {
ui <- mshp[i,]
uj <- mshp[j,]
dprod <- rep(NA, N)
for (n in 1:N) {
li <- A[i,,n]
lj <- A[j,,n]
dprod[n] <- (li - ui) %*% (lj - uj)
}
num <- sum(dprod)
Li2 <- A[i,,]^2
Lj2 <- A[j,,]^2
denom <- sqrt(sum(Li2) * sum(Lj2))
Rij <- num / denom
mat[i, j] <- Rij
}
}
return(mat)
}
M <- congruence_coef(subA)
M
macacaModels
macacaCorrel
dim(M)
M[1,1]
i <- 1
j <- 1
A[1,,]
subA[1,,]
source("Bureau/asym_real/Rfunctions1.txt")
subA <- pgpa(A[,, 156:180])
plot(subA[,1,], subA[,2,])
plot(subA$rotated[,1,], subA$rotated[,2,])
plot(subA$rotated[,1,], subA$rotated[,2,], asp =1)
plot(subA$rotated[,1,], subA$rotated[,3,], asp =1)
plot(subA$rotated[,2,], subA$rotated[,3,], asp =1)
congruence_coef <- function(A) {
N <- dim(A)[3]
P <- dim(A)[1]
K <- dim(A)[2]
mshp <- mshape(A)
mat <- matrix(NA,
ncol = P,
nrow = P)
for (i in 1:P) {
for (j in 1:P) {
ui <- mshp[i,]
uj <- mshp[j,]
dprod <- rep(NA, N)
for (n in 1:N) {
li <- A[i,,n]
lj <- A[j,,n]
dprod[n] <- (li - ui) %*% (lj - uj)
}
num <- sum(dprod)
Li2 <- A[i,,]^2
Lj2 <- A[j,,]^2
denom <- sqrt(sum(Li2) * sum(Lj2))
Rij <- num / denom
mat[i, j] <- Rij
}
}
return(mat)
}
M <- congruence_coef(subA)
M <- congruence_coef(subA$rotated)
M
A <- subA$rotated
A[1,,]
mA <- mshape(A)
mA
li <- lj <- A[1,,]
ui <- mA[1,]
li <- lj <- A[1,,]
ti <- tj <- li - ui
ti
li
dprod <- rep(NA, 25)
ti
dprod <- rep(NA, 25)
for (i in 1:25) {
dprod[i] <- ti[,1] %*% tj[,1]
}
dprod
dprod <- rep(NA, 25)
for (i in 1:25) {
dprod[i] <- ti[,i] %*% tj[,i]
}
dprod
ti[,i]
tj[,i]
tj[,i-1]
numer <- sum(dprod)
numer
dprod_denom <- rep(NA, 25)
li
lj
li[,i]^2
i
dprod_denom <- rep(NA, 25)
for (i in 1:25) {
dprod_denom[i] <- li[,i]^2 %*% lj[,i]^2
}
dprod_denom
denom <- sqrt(dprod_denom)
denom
numer
dprod_denom <- rep(NA, 25)
for (i in 1:25) {
dprod_denom[i] <- sum(li[,i]^2) %*% sum(lj[,i]^2)
}
denom <- sqrt(dprod_denom)
denom
dprod_denom <- rep(NA, 25)
for (i in 1:25) {
dprod_denom[i] <- sum(li[,i]^2) * sum(lj[,i]^2)
}
denom <- sqrt(dprod_denom)
denom
li[,i]^2
sum(li[,i]^2)
library(psych)
install.packages("psych")
library(psych)
?factor.congruence
fa <- fa(Harman74.cor$cov,4)
fa <- fa(Harman74.cor$cov,4,rotate="none")
fa
pc <- principal(Harman74.cor$cov,4,rotate="none")
pc
factor.congruence(fa,pc)
factor.congruence(subA[1,,],subA[1,,])
subA[1,,]
factor.congruence(A[1,,],A[1,,])
factor.congruence(t(A[1,,]),t(A[1,,]))
factor.congruence(t(A[1,,]),t(A[2,,]))
factor.congruence(t(A[1,,]),t(A[3,,]))
A[1,,]
A[3,,]
# Required packages:
library(geomorph)
library(EMMLi)
library(abind)
library(scales)
source("../repo/001_functions.R")
source("../repo/002_asym_components.R")
source("Rfunctions1.txt")
# Required packages:
library(geomorph)
library(EMMLi)
library(abind)
library(scales)
library(paleomorph)
source("../repo/001_functions.R")
source("Rfunctions1.txt")
palette(palette.colors(palette = "Okabe-Ito"))
head_mand
#-------------------------------------------------------------------------------
# Load landöark template
LM_template <- read.csv("data/LM_template.csv")
getwd()
setwd("/home/samuel/Bureau/asym-real/")
source("../repo/001_functions.R")
source("../repo/002_asym_components.R")
source("Rfunctions1.txt")
palette(palette.colors(palette = "Okabe-Ito"))
#-------------------------------------------------------------------------------
# Load landöark template
LM_template <- read.csv("data/LM_template.csv")
names_LM <- LM_template[,1]
no_modularity <- rep(1,
length(names_LM))
head_mand <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 1, 1)
head_mand_sens <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 4, 4)
head_mand_asym <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, 1, 1)
head_mand_asym_sens <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, 4, 4)
ventral_dorsal <- c(1, 1, 1, 1, 4, 4, 4, 1, 1, 1,
4, 4, 4, 1, 1, 4, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 4, 4)
half_half <- c(NA, NA, 1, 1, 1, 1, 1, 1, NA, 2,
2, 2, 2, 2, 2, NA, 1, 2, 1, 2,
1, 1, 1, 2, 2, 2, 1, 2, 1, 1,
1, 1, 2, 2, 2, 2, 1, 2)
mandi_only <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, 2, 3,
2, 2, 2, 3, 3, 3, 2, 3, 2, 2,
2, 2, 3, 3, 3, 3, NA, NA)
df_modul_models <- data.frame(name = names_LM,
no_modul = no_modularity,
head_mand = head_mand,
head_mand_sens = head_mand_sens,
head_mand_asym = head_mand_asym,
head_mand_asym_sens = head_mand_asym_sens,
ventral_dorsal = ventral_dorsal,
half_half = half_half,
mandi_only = mandi_only)
df_modul_models <- df_modul_models[-c(8:10),]
DF <- df_modul_models
input_folder <- "Figures/"
template <- shapes[,,1]
# Required packages:
library(abind)
library(scales)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
# Required packages:
source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
dat <- read.csv(file = "data/data_subset.csv",
header = T,
sep = ",",
dec = ".")
fil <- list.files(path = "data/",
pattern = ".tps",
full.names = T)
ls <- list()
for (i in 1:length(fil)) {
sc <- scan(file = fil[i],
what = "character")
o <- sc[grep("LM=", sc)]
NLM <- as.numeric(sub("LM=",
replacement = "",
o))
if (length(sc) != NLM*3+2) {
warning("Not the right number of landmarks or dimension")
}
coo <- as.numeric(sc[-c(1, length(sc))])
nam <- sub(pattern = "IMAGE=",
replacement = "",
x = sc[length(sc)])
ls[[i]] <- matrix(data = coo,
nrow = NLM,
ncol = 3,
byrow = T)
names(ls)[i] <- nam
}
name <- names(ls)
arr <- array(data = NA,
dim = c(dim(ls[[1]]), length(ls)))
for (i in 1:length(ls)) {arr[,,i] <- ls[[i]]}
arr <- arr[-c(8:10),,]
arr <- arr[,,-grep("0497",
x = name)] # Specimen 0497 was an outlier, probably another species
dat <- dat[-which(dat$ID == "497"),]
name <- name[-grep("0497",
x = name)]
# Procrustes
pA <- pgpa(A = arr)
shapes <- pA$rotated
csiz <- pA$cent.size
mat_shps <- matrix(data = NA,
nrow = dim(shapes)[3],
ncol = dim(shapes)[1] * dim(shapes)[2])
for (i in 1:dim(shapes)[3]) {
mat_shps[i,] <- as.vector(t(shapes[,,i]))
}
replic <- rep(0,
length(name))
replic[grep("REPLICATE",
name)] <- 1
sex <- as.factor(dat$sex)
body_siz <- dat$body.l
head_w <- dat$head.w
head_l <- dat$head.l
head_h <- dat$head.h
bf <- dat$max_bf
bf2 <- dat$bf.max
mbf <- dat$mean_bf
mbf2 <- dat$bf.mean
pca <- prcomp(mat_shps)
var_exp <- pca$sdev^2 / sum(pca$sdev^2) * 100
plot(pca$x[,1:2],
pch = c(15, 17)[as.factor(replic)],
asp = 1)
for (i in 1:length(replic)) {
lines(pca$x[c(i*2-1, i*2), 1:2])
}
template <- shapes[,,1]
oculeyeR <- c(6, 7, 34)
oculeyeL <- c(8, 10, 35)
mandiR <- c(16, 18:20, 28, 29, 24, 26, 27)
mandiL <- c(17, 21:23, 32, 33, 25, 31, 30)
# Required packages:
source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
dat <- read.csv(file = "data/data_subset.csv",
header = T,
sep = ",",
dec = ".")
fil <- list.files(path = "data/",
pattern = ".tps",
full.names = T)
ls <- list()
for (i in 1:length(fil)) {
sc <- scan(file = fil[i],
what = "character")
o <- sc[grep("LM=", sc)]
NLM <- as.numeric(sub("LM=",
replacement = "",
o))
if (length(sc) != NLM*3+2) {
warning("Not the right number of landmarks or dimension")
}
coo <- as.numeric(sc[-c(1, length(sc))])
nam <- sub(pattern = "IMAGE=",
replacement = "",
x = sc[length(sc)])
ls[[i]] <- matrix(data = coo,
nrow = NLM,
ncol = 3,
byrow = T)
names(ls)[i] <- nam
}
name <- names(ls)
arr <- array(data = NA,
dim = c(dim(ls[[1]]), length(ls)))
for (i in 1:length(ls)) {arr[,,i] <- ls[[i]]}
arr <- arr[-c(8:10),,]
arr <- arr[,,-grep("0497",
x = name)] # Specimen 0497 was an outlier, probably another species
dat <- dat[-which(dat$ID == "497"),]
name <- name[-grep("0497",
x = name)]
# Procrustes
pA <- pgpa(A = arr)
shapes <- pA$rotated
csiz <- pA$cent.size
pA$rotated
shapes <- pA$rotated
csiz <- pA$cent.size
mat_shps <- matrix(data = NA,
nrow = dim(shapes)[3],
ncol = dim(shapes)[1] * dim(shapes)[2])
for (i in 1:dim(shapes)[3]) {
mat_shps[i,] <- as.vector(t(shapes[,,i]))
}
replic <- rep(0,
length(name))
replic[grep("REPLICATE",
name)] <- 1
sex <- as.factor(dat$sex)
body_siz <- dat$body.l
head_w <- dat$head.w
head_l <- dat$head.l
head_h <- dat$head.h
bf <- dat$max_bf
bf2 <- dat$bf.max
mbf <- dat$mean_bf
mbf2 <- dat$bf.mean
pca <- prcomp(mat_shps)
var_exp <- pca$sdev^2 / sum(pca$sdev^2) * 100
plot(pca$x[,1:2],
pch = c(15, 17)[as.factor(replic)],
asp = 1)
for (i in 1:length(replic)) {
lines(pca$x[c(i*2-1, i*2), 1:2])
}
replic
plot(shapes[,1,],
shapes[,2,],
asp = 1)
plot(shapes[,3,],
shapes[,2,],
asp = 1)
name_split <- strsplit(x = name,
split = "_")
ID <- rep(NA, length(name))
for (i in 1:length(name)) {
ID[i] <- name_split[[i]][1]
}
ID <- as.factor(ID)
av_A <- array(data = NA,
dim = c(dim(shapes)[1:2],
dim(shapes)[3]/length(unique(replic))))
for (i in 1:length(levels(ID))) {
ind <- levels(ID)[i]
av_A[,,i] <- mshape(shapes[,, which(ID == ind)])
}
csiz.av <- tapply(X = csiz,
INDEX = ID,
FUN = mean)
PC1.av <- tapply(X = pca$x[, 1],
INDEX = ID,
FUN = mean)
PC2.av <- tapply(X = pca$x[, 2],
INDEX = ID,
FUN = mean)
cor.test(csiz.av, head_h)
cor.test(csiz.av, head_w)
cor.test(csiz.av, head_l)
cor.test(csiz.av, PC1.av)
cor.test(csiz.av, PC2.av)
plot(PC1.av,
PC2.av,
pch = c(15, 17)[sex],
asp = 1)
cor.test(csiz.av, bf)
cor.test(PC1.av, bf)
cor.test(PC2.av, bf)
# Required packages:
library(abind)
library(scales)
source("../asym_simulation/001_functions.R")
source("../asym_simulation/002_asym_components.R")
source("Rfunctions1.txt")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
library(rgl)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM
plot3d(shapes[,,1])
?plot3D
?plot3d
shqpes[,,1]
shapes[,,1]
plot3d(shapes[,1,1], shapes[,2,1], shapes[,3,1])
library(rgl)
plot3d(shapes[,1,1], shapes[,2,1], shapes[,3,1])
rglwidget()
devtools::install_github("dmurdoch/rgl")
install.packages("devtools")
install.packages("rgl")
install.packages("rgl")
# Required packages:
source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
?plot3d
?options
#-------------------------------------------------------------------------------
# Global asymmetry decomposition
options(rgl.printRglwidget = TRUE)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
#-------------------------------------------------------------------------------
# Global asymmetry decomposition
options(rgl.printRglwidget = TRUE)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
reord_LM <- rglwidget(locate.reorder(shape = pA$mshape,
along = 2))
source("../asym_simulation/001_functions.R")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
source("../asym_simulation/001_functions.R")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
source("../asym_simulation/001_functions.R")
source("../asym_simulation/002_asym_components.R")
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
rglwidget()
# Required packages:
source(file = "Rfunctions1.txt")
library(scales)
library(car)
library(rgl)
options(rgl.printRglwidget = T)
reord_LM <- locate.reorder(shape = pA$mshape,
along = 2)
interactive()
help("rgl")
open3d()
